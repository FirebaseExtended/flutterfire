// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v20.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "FirestoreMessages.g.h"
#import "FLTFirebaseFirestoreReader.h"
#import "FLTFirebaseFirestoreWriter.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

/// An enumeration of document change types.
@implementation DocumentChangeTypeBox
- (instancetype)initWithValue:(DocumentChangeType)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// An enumeration of firestore source types.
@implementation SourceBox
- (instancetype)initWithValue:(Source)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// The listener retrieves data and listens to updates from the local Firestore cache only.
/// If the cache is empty, an empty snapshot will be returned.
/// Snapshot events will be triggered on cache updates, like local mutations or load bundles.
///
/// Note that the data might be stale if the cache hasn't synchronized with recent server-side
/// changes.
@implementation ListenSourceBox
- (instancetype)initWithValue:(ListenSource)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation ServerTimestampBehaviorBox
- (instancetype)initWithValue:(ServerTimestampBehavior)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// [AggregateSource] represents the source of data for an [AggregateQuery].
@implementation AggregateSourceBox
- (instancetype)initWithValue:(AggregateSource)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation PigeonTransactionResultBox
- (instancetype)initWithValue:(PigeonTransactionResult)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation PigeonTransactionTypeBox
- (instancetype)initWithValue:(PigeonTransactionType)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation AggregateTypeBox
- (instancetype)initWithValue:(AggregateType)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface PigeonFirebaseSettings ()
+ (PigeonFirebaseSettings *)fromList:(NSArray<id> *)list;
+ (nullable PigeonFirebaseSettings *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FirestorePigeonFirebaseApp ()
+ (FirestorePigeonFirebaseApp *)fromList:(NSArray<id> *)list;
+ (nullable FirestorePigeonFirebaseApp *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PigeonSnapshotMetadata ()
+ (PigeonSnapshotMetadata *)fromList:(NSArray<id> *)list;
+ (nullable PigeonSnapshotMetadata *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PigeonDocumentSnapshot ()
+ (PigeonDocumentSnapshot *)fromList:(NSArray<id> *)list;
+ (nullable PigeonDocumentSnapshot *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PigeonDocumentChange ()
+ (PigeonDocumentChange *)fromList:(NSArray<id> *)list;
+ (nullable PigeonDocumentChange *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PigeonQuerySnapshot ()
+ (PigeonQuerySnapshot *)fromList:(NSArray<id> *)list;
+ (nullable PigeonQuerySnapshot *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PigeonGetOptions ()
+ (PigeonGetOptions *)fromList:(NSArray<id> *)list;
+ (nullable PigeonGetOptions *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PigeonDocumentOption ()
+ (PigeonDocumentOption *)fromList:(NSArray<id> *)list;
+ (nullable PigeonDocumentOption *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PigeonTransactionCommand ()
+ (PigeonTransactionCommand *)fromList:(NSArray<id> *)list;
+ (nullable PigeonTransactionCommand *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface DocumentReferenceRequest ()
+ (DocumentReferenceRequest *)fromList:(NSArray<id> *)list;
+ (nullable DocumentReferenceRequest *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PigeonQueryParameters ()
+ (PigeonQueryParameters *)fromList:(NSArray<id> *)list;
+ (nullable PigeonQueryParameters *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface AggregateQuery ()
+ (AggregateQuery *)fromList:(NSArray<id> *)list;
+ (nullable AggregateQuery *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface AggregateQueryResponse ()
+ (AggregateQueryResponse *)fromList:(NSArray<id> *)list;
+ (nullable AggregateQueryResponse *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation PigeonFirebaseSettings
+ (instancetype)makeWithPersistenceEnabled:(nullable NSNumber *)persistenceEnabled
                                      host:(nullable NSString *)host
                                sslEnabled:(nullable NSNumber *)sslEnabled
                            cacheSizeBytes:(nullable NSNumber *)cacheSizeBytes
                 ignoreUndefinedProperties:(BOOL)ignoreUndefinedProperties {
  PigeonFirebaseSettings *pigeonResult = [[PigeonFirebaseSettings alloc] init];
  pigeonResult.persistenceEnabled = persistenceEnabled;
  pigeonResult.host = host;
  pigeonResult.sslEnabled = sslEnabled;
  pigeonResult.cacheSizeBytes = cacheSizeBytes;
  pigeonResult.ignoreUndefinedProperties = ignoreUndefinedProperties;
  return pigeonResult;
}
+ (PigeonFirebaseSettings *)fromList:(NSArray<id> *)list {
  PigeonFirebaseSettings *pigeonResult = [[PigeonFirebaseSettings alloc] init];
  pigeonResult.persistenceEnabled = GetNullableObjectAtIndex(list, 0);
  pigeonResult.host = GetNullableObjectAtIndex(list, 1);
  pigeonResult.sslEnabled = GetNullableObjectAtIndex(list, 2);
  pigeonResult.cacheSizeBytes = GetNullableObjectAtIndex(list, 3);
  pigeonResult.ignoreUndefinedProperties = [GetNullableObjectAtIndex(list, 4) boolValue];
  return pigeonResult;
}
+ (nullable PigeonFirebaseSettings *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PigeonFirebaseSettings fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.persistenceEnabled ?: [NSNull null],
    self.host ?: [NSNull null],
    self.sslEnabled ?: [NSNull null],
    self.cacheSizeBytes ?: [NSNull null],
    @(self.ignoreUndefinedProperties),
  ];
}
@end

@implementation FirestorePigeonFirebaseApp
+ (instancetype)makeWithAppName:(NSString *)appName
                       settings:(PigeonFirebaseSettings *)settings
                    databaseURL:(NSString *)databaseURL {
  FirestorePigeonFirebaseApp *pigeonResult = [[FirestorePigeonFirebaseApp alloc] init];
  pigeonResult.appName = appName;
  pigeonResult.settings = settings;
  pigeonResult.databaseURL = databaseURL;
  return pigeonResult;
}
+ (FirestorePigeonFirebaseApp *)fromList:(NSArray<id> *)list {
  FirestorePigeonFirebaseApp *pigeonResult = [[FirestorePigeonFirebaseApp alloc] init];
  pigeonResult.appName = GetNullableObjectAtIndex(list, 0);
  pigeonResult.settings = GetNullableObjectAtIndex(list, 1);
  pigeonResult.databaseURL = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable FirestorePigeonFirebaseApp *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FirestorePigeonFirebaseApp fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.appName ?: [NSNull null],
    self.settings ?: [NSNull null],
    self.databaseURL ?: [NSNull null],
  ];
}
@end

@implementation PigeonSnapshotMetadata
+ (instancetype)makeWithHasPendingWrites:(BOOL)hasPendingWrites isFromCache:(BOOL)isFromCache {
  PigeonSnapshotMetadata *pigeonResult = [[PigeonSnapshotMetadata alloc] init];
  pigeonResult.hasPendingWrites = hasPendingWrites;
  pigeonResult.isFromCache = isFromCache;
  return pigeonResult;
}
+ (PigeonSnapshotMetadata *)fromList:(NSArray<id> *)list {
  PigeonSnapshotMetadata *pigeonResult = [[PigeonSnapshotMetadata alloc] init];
  pigeonResult.hasPendingWrites = [GetNullableObjectAtIndex(list, 0) boolValue];
  pigeonResult.isFromCache = [GetNullableObjectAtIndex(list, 1) boolValue];
  return pigeonResult;
}
+ (nullable PigeonSnapshotMetadata *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PigeonSnapshotMetadata fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.hasPendingWrites),
    @(self.isFromCache),
  ];
}
@end

@implementation PigeonDocumentSnapshot
+ (instancetype)makeWithPath:(NSString *)path
                        data:(nullable NSDictionary<NSString *, id> *)data
                    metadata:(PigeonSnapshotMetadata *)metadata {
  PigeonDocumentSnapshot *pigeonResult = [[PigeonDocumentSnapshot alloc] init];
  pigeonResult.path = path;
  pigeonResult.data = data;
  pigeonResult.metadata = metadata;
  return pigeonResult;
}
+ (PigeonDocumentSnapshot *)fromList:(NSArray<id> *)list {
  PigeonDocumentSnapshot *pigeonResult = [[PigeonDocumentSnapshot alloc] init];
  pigeonResult.path = GetNullableObjectAtIndex(list, 0);
  pigeonResult.data = GetNullableObjectAtIndex(list, 1);
  pigeonResult.metadata = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable PigeonDocumentSnapshot *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PigeonDocumentSnapshot fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.path ?: [NSNull null],
    self.data ?: [NSNull null],
    self.metadata ?: [NSNull null],
  ];
}
@end

@implementation PigeonDocumentChange
+ (instancetype)makeWithType:(DocumentChangeType)type
                    document:(PigeonDocumentSnapshot *)document
                    oldIndex:(NSInteger)oldIndex
                    newIndex:(NSInteger)newIndex {
  PigeonDocumentChange *pigeonResult = [[PigeonDocumentChange alloc] init];
  pigeonResult.type = type;
  pigeonResult.document = document;
  pigeonResult.oldIndex = oldIndex;
  pigeonResult.index = newIndex;
  return pigeonResult;
}
+ (PigeonDocumentChange *)fromList:(NSArray<id> *)list {
  PigeonDocumentChange *pigeonResult = [[PigeonDocumentChange alloc] init];
  DocumentChangeTypeBox *enumBox = GetNullableObjectAtIndex(list, 0);
  pigeonResult.type = enumBox.value;
  pigeonResult.document = GetNullableObjectAtIndex(list, 1);
  pigeonResult.oldIndex = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.newIndex = [GetNullableObjectAtIndex(list, 3) integerValue];
  return pigeonResult;
}
+ (nullable PigeonDocumentChange *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PigeonDocumentChange fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    [[DocumentChangeTypeBox alloc] initWithValue:self.type],
    self.document ?: [NSNull null],
    @(self.oldIndex),
    @(self.newIndex),
  ];
}
@end

@implementation PigeonQuerySnapshot
+ (instancetype)makeWithDocuments:(NSArray<PigeonDocumentSnapshot *> *)documents
                  documentChanges:(NSArray<PigeonDocumentChange *> *)documentChanges
                         metadata:(PigeonSnapshotMetadata *)metadata {
  PigeonQuerySnapshot *pigeonResult = [[PigeonQuerySnapshot alloc] init];
  pigeonResult.documents = documents;
  pigeonResult.documentChanges = documentChanges;
  pigeonResult.metadata = metadata;
  return pigeonResult;
}
+ (PigeonQuerySnapshot *)fromList:(NSArray<id> *)list {
  PigeonQuerySnapshot *pigeonResult = [[PigeonQuerySnapshot alloc] init];
  pigeonResult.documents = GetNullableObjectAtIndex(list, 0);
  pigeonResult.documentChanges = GetNullableObjectAtIndex(list, 1);
  pigeonResult.metadata = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable PigeonQuerySnapshot *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PigeonQuerySnapshot fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.documents ?: [NSNull null],
    self.documentChanges ?: [NSNull null],
    self.metadata ?: [NSNull null],
  ];
}
@end

@implementation PigeonGetOptions
+ (instancetype)makeWithSource:(Source)source
       serverTimestampBehavior:(ServerTimestampBehavior)serverTimestampBehavior {
  PigeonGetOptions *pigeonResult = [[PigeonGetOptions alloc] init];
  pigeonResult.source = source;
  pigeonResult.serverTimestampBehavior = serverTimestampBehavior;
  return pigeonResult;
}
+ (PigeonGetOptions *)fromList:(NSArray<id> *)list {
  PigeonGetOptions *pigeonResult = [[PigeonGetOptions alloc] init];
  SourceBox *enumBox = GetNullableObjectAtIndex(list, 0);
  pigeonResult.source = enumBox.value;
  ServerTimestampBehaviorBox *enumBox = GetNullableObjectAtIndex(list, 1);
  pigeonResult.serverTimestampBehavior = enumBox.value;
  return pigeonResult;
}
+ (nullable PigeonGetOptions *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PigeonGetOptions fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    [[SourceBox alloc] initWithValue:self.source],
    [[ServerTimestampBehaviorBox alloc] initWithValue:self.serverTimestampBehavior],
  ];
}
@end

@implementation PigeonDocumentOption
+ (instancetype)makeWithMerge:(nullable NSNumber *)merge
                  mergeFields:(nullable NSArray<NSArray<NSString *> *> *)mergeFields {
  PigeonDocumentOption *pigeonResult = [[PigeonDocumentOption alloc] init];
  pigeonResult.merge = merge;
  pigeonResult.mergeFields = mergeFields;
  return pigeonResult;
}
+ (PigeonDocumentOption *)fromList:(NSArray<id> *)list {
  PigeonDocumentOption *pigeonResult = [[PigeonDocumentOption alloc] init];
  pigeonResult.merge = GetNullableObjectAtIndex(list, 0);
  pigeonResult.mergeFields = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable PigeonDocumentOption *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PigeonDocumentOption fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.merge ?: [NSNull null],
    self.mergeFields ?: [NSNull null],
  ];
}
@end

@implementation PigeonTransactionCommand
+ (instancetype)makeWithType:(PigeonTransactionType)type
                        path:(NSString *)path
                        data:(nullable NSDictionary<NSString *, id> *)data
                      option:(nullable PigeonDocumentOption *)option {
  PigeonTransactionCommand *pigeonResult = [[PigeonTransactionCommand alloc] init];
  pigeonResult.type = type;
  pigeonResult.path = path;
  pigeonResult.data = data;
  pigeonResult.option = option;
  return pigeonResult;
}
+ (PigeonTransactionCommand *)fromList:(NSArray<id> *)list {
  PigeonTransactionCommand *pigeonResult = [[PigeonTransactionCommand alloc] init];
  PigeonTransactionTypeBox *enumBox = GetNullableObjectAtIndex(list, 0);
  pigeonResult.type = enumBox.value;
  pigeonResult.path = GetNullableObjectAtIndex(list, 1);
  pigeonResult.data = GetNullableObjectAtIndex(list, 2);
  pigeonResult.option = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable PigeonTransactionCommand *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PigeonTransactionCommand fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    [[PigeonTransactionTypeBox alloc] initWithValue:self.type],
    self.path ?: [NSNull null],
    self.data ?: [NSNull null],
    self.option ?: [NSNull null],
  ];
}
@end

@implementation DocumentReferenceRequest
+ (instancetype)makeWithPath:(NSString *)path
                        data:(nullable NSDictionary<id, id> *)data
                      option:(nullable PigeonDocumentOption *)option
                      source:(nullable SourceBox *)source
     serverTimestampBehavior:(nullable ServerTimestampBehaviorBox *)serverTimestampBehavior {
  DocumentReferenceRequest *pigeonResult = [[DocumentReferenceRequest alloc] init];
  pigeonResult.path = path;
  pigeonResult.data = data;
  pigeonResult.option = option;
  pigeonResult.source = source;
  pigeonResult.serverTimestampBehavior = serverTimestampBehavior;
  return pigeonResult;
}
+ (DocumentReferenceRequest *)fromList:(NSArray<id> *)list {
  DocumentReferenceRequest *pigeonResult = [[DocumentReferenceRequest alloc] init];
  pigeonResult.path = GetNullableObjectAtIndex(list, 0);
  pigeonResult.data = GetNullableObjectAtIndex(list, 1);
  pigeonResult.option = GetNullableObjectAtIndex(list, 2);
  pigeonResult.source = GetNullableObjectAtIndex(list, 3);
  pigeonResult.serverTimestampBehavior = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable DocumentReferenceRequest *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [DocumentReferenceRequest fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.path ?: [NSNull null],
    self.data ?: [NSNull null],
    self.option ?: [NSNull null],
    self.source ?: [NSNull null],
    self.serverTimestampBehavior ?: [NSNull null],
  ];
}
@end

@implementation PigeonQueryParameters
+ (instancetype)makeWithWhere:(nullable NSArray<NSArray<id> *> *)where
                      orderBy:(nullable NSArray<NSArray<id> *> *)orderBy
                        limit:(nullable NSNumber *)limit
                  limitToLast:(nullable NSNumber *)limitToLast
                      startAt:(nullable NSArray<id> *)startAt
                   startAfter:(nullable NSArray<id> *)startAfter
                        endAt:(nullable NSArray<id> *)endAt
                    endBefore:(nullable NSArray<id> *)endBefore
                      filters:(nullable NSDictionary<NSString *, id> *)filters {
  PigeonQueryParameters *pigeonResult = [[PigeonQueryParameters alloc] init];
  pigeonResult.where = where;
  pigeonResult.orderBy = orderBy;
  pigeonResult.limit = limit;
  pigeonResult.limitToLast = limitToLast;
  pigeonResult.startAt = startAt;
  pigeonResult.startAfter = startAfter;
  pigeonResult.endAt = endAt;
  pigeonResult.endBefore = endBefore;
  pigeonResult.filters = filters;
  return pigeonResult;
}
+ (PigeonQueryParameters *)fromList:(NSArray<id> *)list {
  PigeonQueryParameters *pigeonResult = [[PigeonQueryParameters alloc] init];
  pigeonResult.where = GetNullableObjectAtIndex(list, 0);
  pigeonResult.orderBy = GetNullableObjectAtIndex(list, 1);
  pigeonResult.limit = GetNullableObjectAtIndex(list, 2);
  pigeonResult.limitToLast = GetNullableObjectAtIndex(list, 3);
  pigeonResult.startAt = GetNullableObjectAtIndex(list, 4);
  pigeonResult.startAfter = GetNullableObjectAtIndex(list, 5);
  pigeonResult.endAt = GetNullableObjectAtIndex(list, 6);
  pigeonResult.endBefore = GetNullableObjectAtIndex(list, 7);
  pigeonResult.filters = GetNullableObjectAtIndex(list, 8);
  return pigeonResult;
}
+ (nullable PigeonQueryParameters *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PigeonQueryParameters fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.where ?: [NSNull null],
    self.orderBy ?: [NSNull null],
    self.limit ?: [NSNull null],
    self.limitToLast ?: [NSNull null],
    self.startAt ?: [NSNull null],
    self.startAfter ?: [NSNull null],
    self.endAt ?: [NSNull null],
    self.endBefore ?: [NSNull null],
    self.filters ?: [NSNull null],
  ];
}
@end

@implementation AggregateQuery
+ (instancetype)makeWithType:(AggregateType)type field:(nullable NSString *)field {
  AggregateQuery *pigeonResult = [[AggregateQuery alloc] init];
  pigeonResult.type = type;
  pigeonResult.field = field;
  return pigeonResult;
}
+ (AggregateQuery *)fromList:(NSArray<id> *)list {
  AggregateQuery *pigeonResult = [[AggregateQuery alloc] init];
  AggregateTypeBox *enumBox = GetNullableObjectAtIndex(list, 0);
  pigeonResult.type = enumBox.value;
  pigeonResult.field = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable AggregateQuery *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [AggregateQuery fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    [[AggregateTypeBox alloc] initWithValue:self.type],
    self.field ?: [NSNull null],
  ];
}
@end

@implementation AggregateQueryResponse
+ (instancetype)makeWithType:(AggregateType)type
                       field:(nullable NSString *)field
                       value:(nullable NSNumber *)value {
  AggregateQueryResponse *pigeonResult = [[AggregateQueryResponse alloc] init];
  pigeonResult.type = type;
  pigeonResult.field = field;
  pigeonResult.value = value;
  return pigeonResult;
}
+ (AggregateQueryResponse *)fromList:(NSArray<id> *)list {
  AggregateQueryResponse *pigeonResult = [[AggregateQueryResponse alloc] init];
  AggregateTypeBox *enumBox = GetNullableObjectAtIndex(list, 0);
  pigeonResult.type = enumBox.value;
  pigeonResult.field = GetNullableObjectAtIndex(list, 1);
  pigeonResult.value = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable AggregateQueryResponse *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [AggregateQueryResponse fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    [[AggregateTypeBox alloc] initWithValue:self.type],
    self.field ?: [NSNull null],
    self.value ?: [NSNull null],
  ];
}
@end

@interface nullFirestoreMessagesPigeonCodecReader : FlutterStandardReader
@end
@implementation nullFirestoreMessagesPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129:
      return [PigeonFirebaseSettings fromList:[self readValue]];
    case 130:
      return [FirestorePigeonFirebaseApp fromList:[self readValue]];
    case 131:
      return [PigeonSnapshotMetadata fromList:[self readValue]];
    case 132:
      return [PigeonDocumentSnapshot fromList:[self readValue]];
    case 133:
      return [PigeonDocumentChange fromList:[self readValue]];
    case 134:
      return [PigeonQuerySnapshot fromList:[self readValue]];
    case 135:
      return [PigeonGetOptions fromList:[self readValue]];
    case 136:
      return [PigeonDocumentOption fromList:[self readValue]];
    case 137:
      return [PigeonTransactionCommand fromList:[self readValue]];
    case 138:
      return [DocumentReferenceRequest fromList:[self readValue]];
    case 139:
      return [PigeonQueryParameters fromList:[self readValue]];
    case 140:
      return [AggregateQuery fromList:[self readValue]];
    case 141:
      return [AggregateQueryResponse fromList:[self readValue]];
    case 142: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[DocumentChangeTypeBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 143: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil
                                 : [[SourceBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 144: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[ListenSourceBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 145: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[ServerTimestampBehaviorBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 146: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[AggregateSourceBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 147: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[PigeonTransactionResultBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 148: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[PigeonTransactionTypeBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 149: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[AggregateTypeBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface nullFirestoreMessagesPigeonCodecWriter : FlutterStandardWriter
@end
@implementation nullFirestoreMessagesPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[PigeonFirebaseSettings class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FirestorePigeonFirebaseApp class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonSnapshotMetadata class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonDocumentSnapshot class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonDocumentChange class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonQuerySnapshot class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonGetOptions class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonDocumentOption class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonTransactionCommand class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[DocumentReferenceRequest class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonQueryParameters class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AggregateQuery class]]) {
    [self writeByte:140];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AggregateQueryResponse class]]) {
    [self writeByte:141];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[DocumentChangeTypeBox class]]) {
    DocumentChangeTypeBox *box = (DocumentChangeTypeBox *)value;
    [self writeByte:142];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[SourceBox class]]) {
    SourceBox *box = (SourceBox *)value;
    [self writeByte:143];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[ListenSourceBox class]]) {
    ListenSourceBox *box = (ListenSourceBox *)value;
    [self writeByte:144];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[ServerTimestampBehaviorBox class]]) {
    ServerTimestampBehaviorBox *box = (ServerTimestampBehaviorBox *)value;
    [self writeByte:145];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[AggregateSourceBox class]]) {
    AggregateSourceBox *box = (AggregateSourceBox *)value;
    [self writeByte:146];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[PigeonTransactionResultBox class]]) {
    PigeonTransactionResultBox *box = (PigeonTransactionResultBox *)value;
    [self writeByte:147];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[PigeonTransactionTypeBox class]]) {
    PigeonTransactionTypeBox *box = (PigeonTransactionTypeBox *)value;
    [self writeByte:148];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[AggregateTypeBox class]]) {
    AggregateTypeBox *box = (AggregateTypeBox *)value;
    [self writeByte:149];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else {
    [super writeValue:value];
  }
}
@end

@interface nullFirestoreMessagesPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation nullFirestoreMessagesPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[nullFirestoreMessagesPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[nullFirestoreMessagesPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *nullGetFirestoreMessagesCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    nullFirestoreMessagesPigeonCodecReaderWriter *readerWriter =
        [[nullFirestoreMessagesPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpFirebaseFirestoreHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                   NSObject<FirebaseFirestoreHostApi> *api) {
  SetUpFirebaseFirestoreHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpFirebaseFirestoreHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger,
                                             NSObject<FirebaseFirestoreHostApi> *api,
                                             NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0
                             ? [NSString stringWithFormat:@".%@", messageChannelSuffix]
                             : @"";
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.cloud_firestore_platform_"
                                                   @"interface.FirebaseFirestoreHostApi.loadBundle",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(loadBundleApp:bundle:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(loadBundleApp:bundle:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        FlutterStandardTypedData *arg_bundle = GetNullableObjectAtIndex(args, 1);
        [api loadBundleApp:arg_app
                    bundle:arg_bundle
                completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
                  callback(wrapResult(output, error));
                }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.cloud_firestore_platform_"
                                             @"interface.FirebaseFirestoreHostApi.namedQueryGet",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(namedQueryGetApp:name:options:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(namedQueryGetApp:name:options:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_name = GetNullableObjectAtIndex(args, 1);
        PigeonGetOptions *arg_options = GetNullableObjectAtIndex(args, 2);
        [api namedQueryGetApp:arg_app
                         name:arg_name
                      options:arg_options
                   completion:^(PigeonQuerySnapshot *_Nullable output,
                                FlutterError *_Nullable error) {
                     callback(wrapResult(output, error));
                   }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.cloud_firestore_platform_"
                                             @"interface.FirebaseFirestoreHostApi.clearPersistence",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearPersistenceApp:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(clearPersistenceApp:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api clearPersistenceApp:arg_app
                      completion:^(FlutterError *_Nullable error) {
                        callback(wrapResult(nil, error));
                      }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.cloud_firestore_platform_"
                                             @"interface.FirebaseFirestoreHostApi.disableNetwork",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disableNetworkApp:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(disableNetworkApp:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api disableNetworkApp:arg_app
                    completion:^(FlutterError *_Nullable error) {
                      callback(wrapResult(nil, error));
                    }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.cloud_firestore_platform_"
                                             @"interface.FirebaseFirestoreHostApi.enableNetwork",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(enableNetworkApp:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(enableNetworkApp:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api enableNetworkApp:arg_app
                   completion:^(FlutterError *_Nullable error) {
                     callback(wrapResult(nil, error));
                   }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.cloud_firestore_platform_"
                                                   @"interface.FirebaseFirestoreHostApi.terminate",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(terminateApp:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(terminateApp:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api terminateApp:arg_app
               completion:^(FlutterError *_Nullable error) {
                 callback(wrapResult(nil, error));
               }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.cloud_firestore_platform_interface."
                                          @"FirebaseFirestoreHostApi.waitForPendingWrites",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(waitForPendingWritesApp:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(waitForPendingWritesApp:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api waitForPendingWritesApp:arg_app
                          completion:^(FlutterError *_Nullable error) {
                            callback(wrapResult(nil, error));
                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.cloud_firestore_platform_interface."
                                          @"FirebaseFirestoreHostApi.setIndexConfiguration",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIndexConfigurationApp:
                                                        indexConfiguration:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(setIndexConfigurationApp:indexConfiguration:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_indexConfiguration = GetNullableObjectAtIndex(args, 1);
        [api setIndexConfigurationApp:arg_app
                   indexConfiguration:arg_indexConfiguration
                           completion:^(FlutterError *_Nullable error) {
                             callback(wrapResult(nil, error));
                           }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.cloud_firestore_platform_interface."
                                          @"FirebaseFirestoreHostApi.setLoggingEnabled",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLoggingEnabledLoggingEnabled:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(setLoggingEnabledLoggingEnabled:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        BOOL arg_loggingEnabled = [GetNullableObjectAtIndex(args, 0) boolValue];
        [api setLoggingEnabledLoggingEnabled:arg_loggingEnabled
                                  completion:^(FlutterError *_Nullable error) {
                                    callback(wrapResult(nil, error));
                                  }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.cloud_firestore_platform_interface."
                                          @"FirebaseFirestoreHostApi.snapshotsInSyncSetup",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(snapshotsInSyncSetupApp:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(snapshotsInSyncSetupApp:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api snapshotsInSyncSetupApp:arg_app
                          completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
                            callback(wrapResult(output, error));
                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.cloud_firestore_platform_interface."
                                          @"FirebaseFirestoreHostApi.transactionCreate",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(transactionCreateApp:
                                                               timeout:maxAttempts:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(transactionCreateApp:timeout:maxAttempts:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSInteger arg_timeout = [GetNullableObjectAtIndex(args, 1) integerValue];
        NSInteger arg_maxAttempts = [GetNullableObjectAtIndex(args, 2) integerValue];
        [api transactionCreateApp:arg_app
                          timeout:arg_timeout
                      maxAttempts:arg_maxAttempts
                       completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
                         callback(wrapResult(output, error));
                       }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.cloud_firestore_platform_interface."
                                          @"FirebaseFirestoreHostApi.transactionStoreResult",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (transactionStoreResultTransactionId:resultType:commands:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(transactionStoreResultTransactionId:resultType:commands:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_transactionId = GetNullableObjectAtIndex(args, 0);
        PigeonTransactionResultBox *enumBox = GetNullableObjectAtIndex(args, 1);
        PigeonTransactionResult arg_resultType = enumBox.value;
        NSArray<PigeonTransactionCommand *> *arg_commands = GetNullableObjectAtIndex(args, 2);
        [api transactionStoreResultTransactionId:arg_transactionId
                                      resultType:arg_resultType
                                        commands:arg_commands
                                      completion:^(FlutterError *_Nullable error) {
                                        callback(wrapResult(nil, error));
                                      }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.cloud_firestore_platform_"
                                             @"interface.FirebaseFirestoreHostApi.transactionGet",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(transactionGetApp:
                                                      transactionId:path:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(transactionGetApp:transactionId:path:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_transactionId = GetNullableObjectAtIndex(args, 1);
        NSString *arg_path = GetNullableObjectAtIndex(args, 2);
        [api transactionGetApp:arg_app
                 transactionId:arg_transactionId
                          path:arg_path
                    completion:^(PigeonDocumentSnapshot *_Nullable output,
                                 FlutterError *_Nullable error) {
                      callback(wrapResult(output, error));
                    }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.cloud_firestore_platform_interface."
                                          @"FirebaseFirestoreHostApi.documentReferenceSet",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(documentReferenceSetApp:request:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(documentReferenceSetApp:request:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        DocumentReferenceRequest *arg_request = GetNullableObjectAtIndex(args, 1);
        [api documentReferenceSetApp:arg_app
                             request:arg_request
                          completion:^(FlutterError *_Nullable error) {
                            callback(wrapResult(nil, error));
                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.cloud_firestore_platform_interface."
                                          @"FirebaseFirestoreHostApi.documentReferenceUpdate",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(documentReferenceUpdateApp:request:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(documentReferenceUpdateApp:request:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        DocumentReferenceRequest *arg_request = GetNullableObjectAtIndex(args, 1);
        [api documentReferenceUpdateApp:arg_app
                                request:arg_request
                             completion:^(FlutterError *_Nullable error) {
                               callback(wrapResult(nil, error));
                             }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.cloud_firestore_platform_interface."
                                          @"FirebaseFirestoreHostApi.documentReferenceGet",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(documentReferenceGetApp:request:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(documentReferenceGetApp:request:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        DocumentReferenceRequest *arg_request = GetNullableObjectAtIndex(args, 1);
        [api documentReferenceGetApp:arg_app
                             request:arg_request
                          completion:^(PigeonDocumentSnapshot *_Nullable output,
                                       FlutterError *_Nullable error) {
                            callback(wrapResult(output, error));
                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.cloud_firestore_platform_interface."
                                          @"FirebaseFirestoreHostApi.documentReferenceDelete",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(documentReferenceDeleteApp:request:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(documentReferenceDeleteApp:request:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        DocumentReferenceRequest *arg_request = GetNullableObjectAtIndex(args, 1);
        [api documentReferenceDeleteApp:arg_app
                                request:arg_request
                             completion:^(FlutterError *_Nullable error) {
                               callback(wrapResult(nil, error));
                             }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.cloud_firestore_platform_"
                                                   @"interface.FirebaseFirestoreHostApi.queryGet",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (queryGetApp:path:isCollectionGroup:parameters:options:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(queryGetApp:path:isCollectionGroup:parameters:options:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_path = GetNullableObjectAtIndex(args, 1);
        BOOL arg_isCollectionGroup = [GetNullableObjectAtIndex(args, 2) boolValue];
        PigeonQueryParameters *arg_parameters = GetNullableObjectAtIndex(args, 3);
        PigeonGetOptions *arg_options = GetNullableObjectAtIndex(args, 4);
        [api queryGetApp:arg_app
                         path:arg_path
            isCollectionGroup:arg_isCollectionGroup
                   parameters:arg_parameters
                      options:arg_options
                   completion:^(PigeonQuerySnapshot *_Nullable output,
                                FlutterError *_Nullable error) {
                     callback(wrapResult(output, error));
                   }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.cloud_firestore_platform_"
                                             @"interface.FirebaseFirestoreHostApi.aggregateQuery",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (aggregateQueryApp:
                                   path:parameters:source:queries:isCollectionGroup:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(aggregateQueryApp:path:parameters:source:queries:isCollectionGroup:"
                @"completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_path = GetNullableObjectAtIndex(args, 1);
        PigeonQueryParameters *arg_parameters = GetNullableObjectAtIndex(args, 2);
        AggregateSourceBox *enumBox = GetNullableObjectAtIndex(args, 3);
        AggregateSource arg_source = enumBox.value;
        NSArray<AggregateQuery *> *arg_queries = GetNullableObjectAtIndex(args, 4);
        BOOL arg_isCollectionGroup = [GetNullableObjectAtIndex(args, 5) boolValue];
        [api aggregateQueryApp:arg_app
                          path:arg_path
                    parameters:arg_parameters
                        source:arg_source
                       queries:arg_queries
             isCollectionGroup:arg_isCollectionGroup
                    completion:^(NSArray<AggregateQueryResponse *> *_Nullable output,
                                 FlutterError *_Nullable error) {
                      callback(wrapResult(output, error));
                    }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.cloud_firestore_platform_"
                                             @"interface.FirebaseFirestoreHostApi.writeBatchCommit",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(writeBatchCommitApp:writes:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(writeBatchCommitApp:writes:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSArray<PigeonTransactionCommand *> *arg_writes = GetNullableObjectAtIndex(args, 1);
        [api writeBatchCommitApp:arg_app
                          writes:arg_writes
                      completion:^(FlutterError *_Nullable error) {
                        callback(wrapResult(nil, error));
                      }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.cloud_firestore_platform_"
                                             @"interface.FirebaseFirestoreHostApi.querySnapshot",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (querySnapshotApp:
                                  path:isCollectionGroup:parameters:options:includeMetadataChanges
                                      :source:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(querySnapshotApp:path:isCollectionGroup:parameters:options:"
                @"includeMetadataChanges:source:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_path = GetNullableObjectAtIndex(args, 1);
        BOOL arg_isCollectionGroup = [GetNullableObjectAtIndex(args, 2) boolValue];
        PigeonQueryParameters *arg_parameters = GetNullableObjectAtIndex(args, 3);
        PigeonGetOptions *arg_options = GetNullableObjectAtIndex(args, 4);
        BOOL arg_includeMetadataChanges = [GetNullableObjectAtIndex(args, 5) boolValue];
        ListenSourceBox *enumBox = GetNullableObjectAtIndex(args, 6);
        ListenSource arg_source = enumBox.value;
        [api querySnapshotApp:arg_app
                              path:arg_path
                 isCollectionGroup:arg_isCollectionGroup
                        parameters:arg_parameters
                           options:arg_options
            includeMetadataChanges:arg_includeMetadataChanges
                            source:arg_source
                        completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
                          callback(wrapResult(output, error));
                        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.cloud_firestore_platform_interface."
                                          @"FirebaseFirestoreHostApi.documentReferenceSnapshot",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetFirestoreMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (documentReferenceSnapshotApp:
                                        parameters:includeMetadataChanges:source:completion:)],
                @"FirebaseFirestoreHostApi api (%@) doesn't respond to "
                @"@selector(documentReferenceSnapshotApp:parameters:includeMetadataChanges:source:"
                @"completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FirestorePigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        DocumentReferenceRequest *arg_parameters = GetNullableObjectAtIndex(args, 1);
        BOOL arg_includeMetadataChanges = [GetNullableObjectAtIndex(args, 2) boolValue];
        ListenSourceBox *enumBox = GetNullableObjectAtIndex(args, 3);
        ListenSource arg_source = enumBox.value;
        [api documentReferenceSnapshotApp:arg_app
                               parameters:arg_parameters
                   includeMetadataChanges:arg_includeMetadataChanges
                                   source:arg_source
                               completion:^(NSString *_Nullable output,
                                            FlutterError *_Nullable error) {
                                 callback(wrapResult(output, error));
                               }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
