// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v20.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:cloud_firestore_platform_interface/src/method_channel/utils/firestore_message_codec.dart';
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({
  Object? result,
  PlatformException? error,
  bool empty = false,
}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

/// An enumeration of document change types.
enum DocumentChangeType {
  /// Indicates a new document was added to the set of documents matching the
  /// query.
  added,

  /// Indicates a document within the query was modified.
  modified,

  /// Indicates a document within the query was removed (either deleted or no
  /// longer matches the query.
  removed,
}

/// An enumeration of firestore source types.
enum Source {
  /// Causes Firestore to try to retrieve an up-to-date (server-retrieved) snapshot, but fall back to
  /// returning cached data if the server can't be reached.
  serverAndCache,

  /// Causes Firestore to avoid the cache, generating an error if the server cannot be reached. Note
  /// that the cache will still be updated if the server request succeeds. Also note that
  /// latency-compensation still takes effect, so any pending write operations will be visible in the
  /// returned data (merged into the server-provided data).
  server,

  /// Causes Firestore to immediately return a value from the cache, ignoring the server completely
  /// (implying that the returned value may be stale with respect to the value on the server). If
  /// there is no data in the cache to satisfy the `get` call,
  /// [DocumentReference.get] will throw a [FirebaseException] and
  /// [Query.get] will return an empty [QuerySnapshotPlatform] with no documents.
  cache,
}

/// The listener retrieves data and listens to updates from the local Firestore cache only.
/// If the cache is empty, an empty snapshot will be returned.
/// Snapshot events will be triggered on cache updates, like local mutations or load bundles.
///
/// Note that the data might be stale if the cache hasn't synchronized with recent server-side changes.
enum ListenSource {
  /// The default behavior. The listener attempts to return initial snapshot from cache and retrieve up-to-date snapshots from the Firestore server.
  /// Snapshot events will be triggered on local mutations and server side updates.
  defaultSource,

  /// The listener retrieves data and listens to updates from the local Firestore cache only.
  /// If the cache is empty, an empty snapshot will be returned.
  /// Snapshot events will be triggered on cache updates, like local mutations or load bundles.
  cache,
}

enum ServerTimestampBehavior {
  /// Return null for [FieldValue.serverTimestamp()] values that have not yet
  none,

  /// Return local estimates for [FieldValue.serverTimestamp()] values that have not yet been set to their final value.
  estimate,

  /// Return the previous value for [FieldValue.serverTimestamp()] values that have not yet been set to their final value.
  previous,
}

/// [AggregateSource] represents the source of data for an [AggregateQuery].
enum AggregateSource {
  /// Indicates that the data should be retrieved from the server.
  server,
}

enum PigeonTransactionResult {
  success,
  failure,
}

enum PigeonTransactionType {
  get,
  update,
  set,
  deleteType,
}

enum AggregateType {
  count,
  sum,
  average,
}

class PigeonFirebaseSettings {
  PigeonFirebaseSettings({
    this.persistenceEnabled,
    this.host,
    this.sslEnabled,
    this.cacheSizeBytes,
    required this.ignoreUndefinedProperties,
  });

  bool? persistenceEnabled;

  String? host;

  bool? sslEnabled;

  int? cacheSizeBytes;

  bool ignoreUndefinedProperties;

  Object encode() {
    return <Object?>[
      persistenceEnabled,
      host,
      sslEnabled,
      cacheSizeBytes,
      ignoreUndefinedProperties,
    ];
  }

  static PigeonFirebaseSettings decode(Object result) {
    result as List<Object?>;
    return PigeonFirebaseSettings(
      persistenceEnabled: result[0] as bool?,
      host: result[1] as String?,
      sslEnabled: result[2] as bool?,
      cacheSizeBytes: result[3] as int?,
      ignoreUndefinedProperties: result[4]! as bool,
    );
  }
}

class FirestorePigeonFirebaseApp {
  FirestorePigeonFirebaseApp({
    required this.appName,
    required this.settings,
    required this.databaseURL,
  });

  String appName;

  PigeonFirebaseSettings settings;

  String databaseURL;

  Object encode() {
    return <Object?>[
      appName,
      settings,
      databaseURL,
    ];
  }

  static FirestorePigeonFirebaseApp decode(Object result) {
    result as List<Object?>;
    return FirestorePigeonFirebaseApp(
      appName: result[0]! as String,
      settings: result[1]! as PigeonFirebaseSettings,
      databaseURL: result[2]! as String,
    );
  }
}

class PigeonSnapshotMetadata {
  PigeonSnapshotMetadata({
    required this.hasPendingWrites,
    required this.isFromCache,
  });

  bool hasPendingWrites;

  bool isFromCache;

  Object encode() {
    return <Object?>[
      hasPendingWrites,
      isFromCache,
    ];
  }

  static PigeonSnapshotMetadata decode(Object result) {
    result as List<Object?>;
    return PigeonSnapshotMetadata(
      hasPendingWrites: result[0]! as bool,
      isFromCache: result[1]! as bool,
    );
  }
}

class PigeonDocumentSnapshot {
  PigeonDocumentSnapshot({
    required this.path,
    this.data,
    required this.metadata,
  });

  String path;

  Map<String?, Object?>? data;

  PigeonSnapshotMetadata metadata;

  Object encode() {
    return <Object?>[
      path,
      data,
      metadata,
    ];
  }

  static PigeonDocumentSnapshot decode(Object result) {
    result as List<Object?>;
    return PigeonDocumentSnapshot(
      path: result[0]! as String,
      data: (result[1] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
      metadata: result[2]! as PigeonSnapshotMetadata,
    );
  }
}

class PigeonDocumentChange {
  PigeonDocumentChange({
    required this.type,
    required this.document,
    required this.oldIndex,
    required this.newIndex,
  });

  DocumentChangeType type;

  PigeonDocumentSnapshot document;

  int oldIndex;

  int newIndex;

  Object encode() {
    return <Object?>[
      type,
      document,
      oldIndex,
      newIndex,
    ];
  }

  static PigeonDocumentChange decode(Object result) {
    result as List<Object?>;
    return PigeonDocumentChange(
      type: result[0]! as DocumentChangeType,
      document: result[1]! as PigeonDocumentSnapshot,
      oldIndex: result[2]! as int,
      newIndex: result[3]! as int,
    );
  }
}

class PigeonQuerySnapshot {
  PigeonQuerySnapshot({
    required this.documents,
    required this.documentChanges,
    required this.metadata,
  });

  List<PigeonDocumentSnapshot?> documents;

  List<PigeonDocumentChange?> documentChanges;

  PigeonSnapshotMetadata metadata;

  Object encode() {
    return <Object?>[
      documents,
      documentChanges,
      metadata,
    ];
  }

  static PigeonQuerySnapshot decode(Object result) {
    result as List<Object?>;
    return PigeonQuerySnapshot(
      documents: (result[0] as List<Object?>?)!.cast<PigeonDocumentSnapshot?>(),
      documentChanges:
          (result[1] as List<Object?>?)!.cast<PigeonDocumentChange?>(),
      metadata: result[2]! as PigeonSnapshotMetadata,
    );
  }
}

class PigeonGetOptions {
  PigeonGetOptions({
    required this.source,
    required this.serverTimestampBehavior,
  });

  Source source;

  ServerTimestampBehavior serverTimestampBehavior;

  Object encode() {
    return <Object?>[
      source,
      serverTimestampBehavior,
    ];
  }

  static PigeonGetOptions decode(Object result) {
    result as List<Object?>;
    return PigeonGetOptions(
      source: result[0]! as Source,
      serverTimestampBehavior: result[1]! as ServerTimestampBehavior,
    );
  }
}

class PigeonDocumentOption {
  PigeonDocumentOption({
    this.merge,
    this.mergeFields,
  });

  bool? merge;

  List<List<String?>?>? mergeFields;

  Object encode() {
    return <Object?>[
      merge,
      mergeFields,
    ];
  }

  static PigeonDocumentOption decode(Object result) {
    result as List<Object?>;
    return PigeonDocumentOption(
      merge: result[0] as bool?,
      mergeFields: (result[1] as List<Object?>?)?.cast<List<String?>?>(),
    );
  }
}

class PigeonTransactionCommand {
  PigeonTransactionCommand({
    required this.type,
    required this.path,
    this.data,
    this.option,
  });

  PigeonTransactionType type;

  String path;

  Map<String?, Object?>? data;

  PigeonDocumentOption? option;

  Object encode() {
    return <Object?>[
      type,
      path,
      data,
      option,
    ];
  }

  static PigeonTransactionCommand decode(Object result) {
    result as List<Object?>;
    return PigeonTransactionCommand(
      type: result[0]! as PigeonTransactionType,
      path: result[1]! as String,
      data: (result[2] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
      option: result[3] as PigeonDocumentOption?,
    );
  }
}

class DocumentReferenceRequest {
  DocumentReferenceRequest({
    required this.path,
    this.data,
    this.option,
    this.source,
    this.serverTimestampBehavior,
  });

  String path;

  Map<Object?, Object?>? data;

  PigeonDocumentOption? option;

  Source? source;

  ServerTimestampBehavior? serverTimestampBehavior;

  Object encode() {
    return <Object?>[
      path,
      data,
      option,
      source,
      serverTimestampBehavior,
    ];
  }

  static DocumentReferenceRequest decode(Object result) {
    result as List<Object?>;
    return DocumentReferenceRequest(
      path: result[0]! as String,
      data: (result[1] as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
      option: result[2] as PigeonDocumentOption?,
      source: result[3] as Source?,
      serverTimestampBehavior: result[4] as ServerTimestampBehavior?,
    );
  }
}

class PigeonQueryParameters {
  PigeonQueryParameters({
    this.where,
    this.orderBy,
    this.limit,
    this.limitToLast,
    this.startAt,
    this.startAfter,
    this.endAt,
    this.endBefore,
    this.filters,
  });

  List<List<Object?>?>? where;

  List<List<Object?>?>? orderBy;

  int? limit;

  int? limitToLast;

  List<Object?>? startAt;

  List<Object?>? startAfter;

  List<Object?>? endAt;

  List<Object?>? endBefore;

  Map<String?, Object?>? filters;

  Object encode() {
    return <Object?>[
      where,
      orderBy,
      limit,
      limitToLast,
      startAt,
      startAfter,
      endAt,
      endBefore,
      filters,
    ];
  }

  static PigeonQueryParameters decode(Object result) {
    result as List<Object?>;
    return PigeonQueryParameters(
      where: (result[0] as List<Object?>?)?.cast<List<Object?>?>(),
      orderBy: (result[1] as List<Object?>?)?.cast<List<Object?>?>(),
      limit: result[2] as int?,
      limitToLast: result[3] as int?,
      startAt: (result[4] as List<Object?>?)?.cast<Object?>(),
      startAfter: (result[5] as List<Object?>?)?.cast<Object?>(),
      endAt: (result[6] as List<Object?>?)?.cast<Object?>(),
      endBefore: (result[7] as List<Object?>?)?.cast<Object?>(),
      filters: (result[8] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
    );
  }
}

class AggregateQuery {
  AggregateQuery({
    required this.type,
    this.field,
  });

  AggregateType type;

  String? field;

  Object encode() {
    return <Object?>[
      type,
      field,
    ];
  }

  static AggregateQuery decode(Object result) {
    result as List<Object?>;
    return AggregateQuery(
      type: result[0]! as AggregateType,
      field: result[1] as String?,
    );
  }
}

class AggregateQueryResponse {
  AggregateQueryResponse({
    required this.type,
    this.field,
    this.value,
  });

  AggregateType type;

  String? field;

  double? value;

  Object encode() {
    return <Object?>[
      type,
      field,
      value,
    ];
  }

  static AggregateQueryResponse decode(Object result) {
    result as List<Object?>;
    return AggregateQueryResponse(
      type: result[0]! as AggregateType,
      field: result[1] as String?,
      value: result[2] as double?,
    );
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonFirebaseSettings) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is FirestorePigeonFirebaseApp) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PigeonSnapshotMetadata) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PigeonDocumentSnapshot) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PigeonDocumentChange) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PigeonQuerySnapshot) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PigeonGetOptions) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PigeonDocumentOption) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is PigeonTransactionCommand) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is DocumentReferenceRequest) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is PigeonQueryParameters) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is AggregateQuery) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is AggregateQueryResponse) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is DocumentChangeType) {
      buffer.putUint8(142);
      writeValue(buffer, value.index);
    } else if (value is Source) {
      buffer.putUint8(143);
      writeValue(buffer, value.index);
    } else if (value is ListenSource) {
      buffer.putUint8(144);
      writeValue(buffer, value.index);
    } else if (value is ServerTimestampBehavior) {
      buffer.putUint8(145);
      writeValue(buffer, value.index);
    } else if (value is AggregateSource) {
      buffer.putUint8(146);
      writeValue(buffer, value.index);
    } else if (value is PigeonTransactionResult) {
      buffer.putUint8(147);
      writeValue(buffer, value.index);
    } else if (value is PigeonTransactionType) {
      buffer.putUint8(148);
      writeValue(buffer, value.index);
    } else if (value is AggregateType) {
      buffer.putUint8(149);
      writeValue(buffer, value.index);
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        return PigeonFirebaseSettings.decode(readValue(buffer)!);
      case 130:
        return FirestorePigeonFirebaseApp.decode(readValue(buffer)!);
      case 131:
        return PigeonSnapshotMetadata.decode(readValue(buffer)!);
      case 132:
        return PigeonDocumentSnapshot.decode(readValue(buffer)!);
      case 133:
        return PigeonDocumentChange.decode(readValue(buffer)!);
      case 134:
        return PigeonQuerySnapshot.decode(readValue(buffer)!);
      case 135:
        return PigeonGetOptions.decode(readValue(buffer)!);
      case 136:
        return PigeonDocumentOption.decode(readValue(buffer)!);
      case 137:
        return PigeonTransactionCommand.decode(readValue(buffer)!);
      case 138:
        return DocumentReferenceRequest.decode(readValue(buffer)!);
      case 139:
        return PigeonQueryParameters.decode(readValue(buffer)!);
      case 140:
        return AggregateQuery.decode(readValue(buffer)!);
      case 141:
        return AggregateQueryResponse.decode(readValue(buffer)!);
      case 142:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : DocumentChangeType.values[value];
      case 143:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : Source.values[value];
      case 144:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ListenSource.values[value];
      case 145:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ServerTimestampBehavior.values[value];
      case 146:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AggregateSource.values[value];
      case 147:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PigeonTransactionResult.values[value];
      case 148:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PigeonTransactionType.values[value];
      case 149:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AggregateType.values[value];
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FirebaseFirestoreHostApi {
  /// Constructor for [FirebaseFirestoreHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FirebaseFirestoreHostApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  })  : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String __pigeon_messageChannelSuffix;

  Future<String> loadBundle(
    FirestorePigeonFirebaseApp app,
    Uint8List bundle,
  ) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.loadBundle$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[app, bundle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  Future<PigeonQuerySnapshot> namedQueryGet(
    FirestorePigeonFirebaseApp app,
    String name,
    PigeonGetOptions options,
  ) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.namedQueryGet$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[app, name, options]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PigeonQuerySnapshot?)!;
    }
  }

  Future<void> clearPersistence(FirestorePigeonFirebaseApp app) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.clearPersistence$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[app]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disableNetwork(FirestorePigeonFirebaseApp app) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.disableNetwork$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[app]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> enableNetwork(FirestorePigeonFirebaseApp app) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.enableNetwork$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[app]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> terminate(FirestorePigeonFirebaseApp app) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.terminate$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[app]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> waitForPendingWrites(FirestorePigeonFirebaseApp app) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.waitForPendingWrites$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[app]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setIndexConfiguration(
    FirestorePigeonFirebaseApp app,
    String indexConfiguration,
  ) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.setIndexConfiguration$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[app, indexConfiguration]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setLoggingEnabled(bool loggingEnabled) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.setLoggingEnabled$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[loggingEnabled]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> snapshotsInSyncSetup(FirestorePigeonFirebaseApp app) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.snapshotsInSyncSetup$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[app]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  Future<String> transactionCreate(
    FirestorePigeonFirebaseApp app,
    int timeout,
    int maxAttempts,
  ) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.transactionCreate$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[app, timeout, maxAttempts]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  Future<void> transactionStoreResult(
    String transactionId,
    PigeonTransactionResult resultType,
    List<PigeonTransactionCommand?>? commands,
  ) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.transactionStoreResult$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[transactionId, resultType, commands]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonDocumentSnapshot> transactionGet(
    FirestorePigeonFirebaseApp app,
    String transactionId,
    String path,
  ) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.transactionGet$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[app, transactionId, path]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PigeonDocumentSnapshot?)!;
    }
  }

  Future<void> documentReferenceSet(
    FirestorePigeonFirebaseApp app,
    DocumentReferenceRequest request,
  ) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.documentReferenceSet$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[app, request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> documentReferenceUpdate(
    FirestorePigeonFirebaseApp app,
    DocumentReferenceRequest request,
  ) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.documentReferenceUpdate$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[app, request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonDocumentSnapshot> documentReferenceGet(
    FirestorePigeonFirebaseApp app,
    DocumentReferenceRequest request,
  ) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.documentReferenceGet$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[app, request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PigeonDocumentSnapshot?)!;
    }
  }

  Future<void> documentReferenceDelete(
    FirestorePigeonFirebaseApp app,
    DocumentReferenceRequest request,
  ) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.documentReferenceDelete$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[app, request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonQuerySnapshot> queryGet(
    FirestorePigeonFirebaseApp app,
    String path,
    bool isCollectionGroup,
    PigeonQueryParameters parameters,
    PigeonGetOptions options,
  ) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.queryGet$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
            .send(<Object?>[app, path, isCollectionGroup, parameters, options])
        as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PigeonQuerySnapshot?)!;
    }
  }

  Future<List<AggregateQueryResponse?>> aggregateQuery(
    FirestorePigeonFirebaseApp app,
    String path,
    PigeonQueryParameters parameters,
    AggregateSource source,
    List<AggregateQuery?> queries,
    bool isCollectionGroup,
  ) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.aggregateQuery$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[
      app,
      path,
      parameters,
      source,
      queries,
      isCollectionGroup,
    ]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!
          .cast<AggregateQueryResponse?>();
    }
  }

  Future<void> writeBatchCommit(
    FirestorePigeonFirebaseApp app,
    List<PigeonTransactionCommand?> writes,
  ) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.writeBatchCommit$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[app, writes]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> querySnapshot(
    FirestorePigeonFirebaseApp app,
    String path,
    bool isCollectionGroup,
    PigeonQueryParameters parameters,
    PigeonGetOptions options,
    bool includeMetadataChanges,
    ListenSource source,
  ) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.querySnapshot$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[
      app,
      path,
      isCollectionGroup,
      parameters,
      options,
      includeMetadataChanges,
      source,
    ]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  Future<String> documentReferenceSnapshot(
    FirestorePigeonFirebaseApp app,
    DocumentReferenceRequest parameters,
    bool includeMetadataChanges,
    ListenSource source,
  ) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.cloud_firestore_platform_interface.FirebaseFirestoreHostApi.documentReferenceSnapshot$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
            .send(<Object?>[app, parameters, includeMetadataChanges, source])
        as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }
}
