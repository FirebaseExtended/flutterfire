// Autogenerated from Pigeon (v9.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

/// The type of operation that generated the action code from calling
/// [TaskState].
typedef NS_ENUM(NSUInteger, PigeonTaskState) {
  /// Indicates the task has been paused by the user.
  PigeonTaskStatePaused = 0,
  /// Indicates the task is currently in-progress.
  PigeonTaskStateRunning = 1,
  /// Indicates the task has successfully completed.
  PigeonTaskStateSuccess = 2,
  /// Indicates the task was canceled.
  PigeonTaskStateCanceled = 3,
  /// Indicates the task failed with an error.
  PigeonTaskStateError = 4,
};

@class PigeonFirebaseApp;
@class PigeonStorageReference;
@class PigeonFullMetaData;
@class PigeonListOptions;
@class PigeonSettableMetadata;
@class PigeonTaskSnapShot;

@interface PigeonFirebaseApp : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithAppName:(NSString *)appName
    tenantId:(nullable NSString *)tenantId;
@property(nonatomic, copy) NSString * appName;
@property(nonatomic, copy, nullable) NSString * tenantId;
@end

@interface PigeonStorageReference : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithBucket:(NSString *)bucket
    fullPath:(NSString *)fullPath
    name:(NSString *)name;
@property(nonatomic, copy) NSString * bucket;
@property(nonatomic, copy) NSString * fullPath;
@property(nonatomic, copy) NSString * name;
@end

@interface PigeonFullMetaData : NSObject
+ (instancetype)makeWithMetadata:(nullable NSDictionary<NSString *, id> *)metadata;
@property(nonatomic, strong, nullable) NSDictionary<NSString *, id> * metadata;
@end

@interface PigeonListOptions : NSObject
+ (instancetype)makeWithMaxResults:(nullable NSNumber *)maxResults
    pageToken:(nullable NSString *)pageToken;
/// If set, limits the total number of `prefixes` and `items` to return.
///
/// The default and maximum maxResults is 1000.
@property(nonatomic, strong, nullable) NSNumber * maxResults;
/// The nextPageToken from a previous call to list().
///
/// If provided, listing is resumed from the previous position.
@property(nonatomic, copy, nullable) NSString * pageToken;
@end

@interface PigeonSettableMetadata : NSObject
+ (instancetype)makeWithCacheControl:(nullable NSString *)cacheControl
    contentDisposition:(nullable NSString *)contentDisposition
    contentEncoding:(nullable NSString *)contentEncoding
    contentLanguage:(nullable NSString *)contentLanguage
    contentType:(nullable NSString *)contentType
    customMetadata:(nullable NSDictionary<NSString *, NSString *> *)customMetadata;
/// Served as the 'Cache-Control' header on object download.
///
/// See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control.
@property(nonatomic, copy, nullable) NSString * cacheControl;
/// Served as the 'Content-Disposition' header on object download.
///
/// See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition.
@property(nonatomic, copy, nullable) NSString * contentDisposition;
/// Served as the 'Content-Encoding' header on object download.
///
/// See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding.
@property(nonatomic, copy, nullable) NSString * contentEncoding;
/// Served as the 'Content-Language' header on object download.
///
/// See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Language.
@property(nonatomic, copy, nullable) NSString * contentLanguage;
/// Served as the 'Content-Type' header on object download.
///
/// See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type.
@property(nonatomic, copy, nullable) NSString * contentType;
/// Additional user-defined custom metadata.
@property(nonatomic, strong, nullable) NSDictionary<NSString *, NSString *> * customMetadata;
@end

@interface PigeonTaskSnapShot : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithBytesTransferred:(NSNumber *)bytesTransferred
    metadata:(nullable PigeonFullMetaData *)metadata
    state:(PigeonTaskState)state
    totalBytes:(NSNumber *)totalBytes;
@property(nonatomic, strong) NSNumber * bytesTransferred;
@property(nonatomic, strong, nullable) PigeonFullMetaData * metadata;
@property(nonatomic, assign) PigeonTaskState state;
@property(nonatomic, strong) NSNumber * totalBytes;
@end

/// The codec used by FirebaseStorageHostApi.
NSObject<FlutterMessageCodec> *FirebaseStorageHostApiGetCodec(void);

@protocol FirebaseStorageHostApi
/// @return `nil` only when `error != nil`.
- (nullable PigeonStorageReference *)getReferencebyPathApp:(PigeonFirebaseApp *)app path:(NSString *)path error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setMaxOperationRetryTimeApp:(PigeonFirebaseApp *)app time:(NSNumber *)time error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setMaxUploadRetryTimeApp:(PigeonFirebaseApp *)app time:(NSNumber *)time error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setMaxDownloadRetryTimeApp:(PigeonFirebaseApp *)app time:(NSNumber *)time error:(FlutterError *_Nullable *_Nonnull)error;
- (void)useStorageEmulatorApp:(PigeonFirebaseApp *)app host:(NSString *)host port:(NSNumber *)port completion:(void (^)(FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (nullable PigeonStorageReference *)referenceGetParentApp:(PigeonFirebaseApp *)app reference:(PigeonStorageReference *)reference error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable PigeonStorageReference *)referenceGetRootApp:(PigeonFirebaseApp *)app reference:(PigeonStorageReference *)reference error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable PigeonStorageReference *)referenceGetChildApp:(PigeonFirebaseApp *)app reference:(PigeonStorageReference *)reference path:(NSString *)path error:(FlutterError *_Nullable *_Nonnull)error;
- (void)referenceDeleteApp:(PigeonFirebaseApp *)app reference:(PigeonStorageReference *)reference completion:(void (^)(FlutterError *_Nullable))completion;
- (void)referenceGetDownloadURLApp:(PigeonFirebaseApp *)app reference:(PigeonStorageReference *)reference completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
- (void)referenceGetMetaDataApp:(PigeonFirebaseApp *)app reference:(PigeonStorageReference *)reference completion:(void (^)(PigeonFullMetaData *_Nullable, FlutterError *_Nullable))completion;
- (void)referenceListApp:(PigeonFirebaseApp *)app reference:(PigeonStorageReference *)reference options:(PigeonListOptions *)options completion:(void (^)(NSArray<PigeonStorageReference *> *_Nullable, FlutterError *_Nullable))completion;
- (void)referenceListAllApp:(PigeonFirebaseApp *)app reference:(PigeonStorageReference *)reference completion:(void (^)(NSArray<PigeonStorageReference *> *_Nullable, FlutterError *_Nullable))completion;
- (void)referenceGetDataApp:(PigeonFirebaseApp *)app reference:(PigeonStorageReference *)reference maxSize:(NSNumber *)maxSize completion:(void (^)(FlutterStandardTypedData *_Nullable, FlutterError *_Nullable))completion;
- (void)referenceUpdateMetadataApp:(PigeonFirebaseApp *)app reference:(PigeonStorageReference *)reference metadata:(PigeonSettableMetadata *)metadata completion:(void (^)(PigeonFullMetaData *_Nullable, FlutterError *_Nullable))completion;
- (void)taskPauseApp:(PigeonFirebaseApp *)app taskSnap:(PigeonTaskSnapShot *)taskSnap completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)taskResumeApp:(PigeonFirebaseApp *)app taskSnap:(PigeonTaskSnapShot *)taskSnap completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)taskCancelApp:(PigeonFirebaseApp *)app taskSnap:(PigeonTaskSnapShot *)taskSnap completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
@end

extern void FirebaseStorageHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FirebaseStorageHostApi> *_Nullable api);

NS_ASSUME_NONNULL_END
