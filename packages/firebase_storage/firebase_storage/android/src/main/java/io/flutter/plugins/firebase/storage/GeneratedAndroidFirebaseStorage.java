// Autogenerated from Pigeon (v9.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins.firebase.storage;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class GeneratedAndroidFirebaseStorage {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /**
   * The type of operation that generated the action code from calling
   * [TaskState].
   */
  public enum PigeonTaskState {
    /** Indicates the task has been paused by the user. */
    PAUSED(0),
    /** Indicates the task is currently in-progress. */
    RUNNING(1),
    /** Indicates the task has successfully completed. */
    SUCCESS(2),
    /** Indicates the task was canceled. */
    CANCELED(3),
    /** Indicates the task failed with an error. */
    ERROR(4);

    final int index;

    private PigeonTaskState(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonFirebaseApp {
    private @NonNull String appName;

    public @NonNull String getAppName() {
      return appName;
    }

    public void setAppName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"appName\" is null.");
      }
      this.appName = setterArg;
    }

    private @Nullable String tenantId;

    public @Nullable String getTenantId() {
      return tenantId;
    }

    public void setTenantId(@Nullable String setterArg) {
      this.tenantId = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonFirebaseApp() {}

    public static final class Builder {

      private @Nullable String appName;

      public @NonNull Builder setAppName(@NonNull String setterArg) {
        this.appName = setterArg;
        return this;
      }

      private @Nullable String tenantId;

      public @NonNull Builder setTenantId(@Nullable String setterArg) {
        this.tenantId = setterArg;
        return this;
      }

      public @NonNull PigeonFirebaseApp build() {
        PigeonFirebaseApp pigeonReturn = new PigeonFirebaseApp();
        pigeonReturn.setAppName(appName);
        pigeonReturn.setTenantId(tenantId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(appName);
      toListResult.add(tenantId);
      return toListResult;
    }

    static @NonNull PigeonFirebaseApp fromList(@NonNull ArrayList<Object> list) {
      PigeonFirebaseApp pigeonResult = new PigeonFirebaseApp();
      Object appName = list.get(0);
      pigeonResult.setAppName((String) appName);
      Object tenantId = list.get(1);
      pigeonResult.setTenantId((String) tenantId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonStorageReference {
    private @NonNull String bucket;

    public @NonNull String getBucket() {
      return bucket;
    }

    public void setBucket(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bucket\" is null.");
      }
      this.bucket = setterArg;
    }

    private @NonNull String fullPath;

    public @NonNull String getFullPath() {
      return fullPath;
    }

    public void setFullPath(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"fullPath\" is null.");
      }
      this.fullPath = setterArg;
    }

    private @NonNull String name;

    public @NonNull String getName() {
      return name;
    }

    public void setName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"name\" is null.");
      }
      this.name = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonStorageReference() {}

    public static final class Builder {

      private @Nullable String bucket;

      public @NonNull Builder setBucket(@NonNull String setterArg) {
        this.bucket = setterArg;
        return this;
      }

      private @Nullable String fullPath;

      public @NonNull Builder setFullPath(@NonNull String setterArg) {
        this.fullPath = setterArg;
        return this;
      }

      private @Nullable String name;

      public @NonNull Builder setName(@NonNull String setterArg) {
        this.name = setterArg;
        return this;
      }

      public @NonNull PigeonStorageReference build() {
        PigeonStorageReference pigeonReturn = new PigeonStorageReference();
        pigeonReturn.setBucket(bucket);
        pigeonReturn.setFullPath(fullPath);
        pigeonReturn.setName(name);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(bucket);
      toListResult.add(fullPath);
      toListResult.add(name);
      return toListResult;
    }

    static @NonNull PigeonStorageReference fromList(@NonNull ArrayList<Object> list) {
      PigeonStorageReference pigeonResult = new PigeonStorageReference();
      Object bucket = list.get(0);
      pigeonResult.setBucket((String) bucket);
      Object fullPath = list.get(1);
      pigeonResult.setFullPath((String) fullPath);
      Object name = list.get(2);
      pigeonResult.setName((String) name);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonFullMetaData {
    private @Nullable Map<String, Object> metadata;

    public @Nullable Map<String, Object> getMetadata() {
      return metadata;
    }

    public void setMetadata(@Nullable Map<String, Object> setterArg) {
      this.metadata = setterArg;
    }

    public static final class Builder {

      private @Nullable Map<String, Object> metadata;

      public @NonNull Builder setMetadata(@Nullable Map<String, Object> setterArg) {
        this.metadata = setterArg;
        return this;
      }

      public @NonNull PigeonFullMetaData build() {
        PigeonFullMetaData pigeonReturn = new PigeonFullMetaData();
        pigeonReturn.setMetadata(metadata);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(metadata);
      return toListResult;
    }

    static @NonNull PigeonFullMetaData fromList(@NonNull ArrayList<Object> list) {
      PigeonFullMetaData pigeonResult = new PigeonFullMetaData();
      Object metadata = list.get(0);
      pigeonResult.setMetadata((Map<String, Object>) metadata);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonListOptions {
    /**
     * If set, limits the total number of `prefixes` and `items` to return.
     *
     * The default and maximum maxResults is 1000.
     */
    private @Nullable Long maxResults;

    public @Nullable Long getMaxResults() {
      return maxResults;
    }

    public void setMaxResults(@Nullable Long setterArg) {
      this.maxResults = setterArg;
    }

    /**
     * The nextPageToken from a previous call to list().
     *
     * If provided, listing is resumed from the previous position.
     */
    private @Nullable String pageToken;

    public @Nullable String getPageToken() {
      return pageToken;
    }

    public void setPageToken(@Nullable String setterArg) {
      this.pageToken = setterArg;
    }

    public static final class Builder {

      private @Nullable Long maxResults;

      public @NonNull Builder setMaxResults(@Nullable Long setterArg) {
        this.maxResults = setterArg;
        return this;
      }

      private @Nullable String pageToken;

      public @NonNull Builder setPageToken(@Nullable String setterArg) {
        this.pageToken = setterArg;
        return this;
      }

      public @NonNull PigeonListOptions build() {
        PigeonListOptions pigeonReturn = new PigeonListOptions();
        pigeonReturn.setMaxResults(maxResults);
        pigeonReturn.setPageToken(pageToken);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(maxResults);
      toListResult.add(pageToken);
      return toListResult;
    }

    static @NonNull PigeonListOptions fromList(@NonNull ArrayList<Object> list) {
      PigeonListOptions pigeonResult = new PigeonListOptions();
      Object maxResults = list.get(0);
      pigeonResult.setMaxResults((maxResults == null) ? null : ((maxResults instanceof Integer) ? (Integer) maxResults : (Long) maxResults));
      Object pageToken = list.get(1);
      pigeonResult.setPageToken((String) pageToken);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonSettableMetadata {
    /**
     * Served as the 'Cache-Control' header on object download.
     *
     * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control.
     */
    private @Nullable String cacheControl;

    public @Nullable String getCacheControl() {
      return cacheControl;
    }

    public void setCacheControl(@Nullable String setterArg) {
      this.cacheControl = setterArg;
    }

    /**
     * Served as the 'Content-Disposition' header on object download.
     *
     * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition.
     */
    private @Nullable String contentDisposition;

    public @Nullable String getContentDisposition() {
      return contentDisposition;
    }

    public void setContentDisposition(@Nullable String setterArg) {
      this.contentDisposition = setterArg;
    }

    /**
     * Served as the 'Content-Encoding' header on object download.
     *
     * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding.
     */
    private @Nullable String contentEncoding;

    public @Nullable String getContentEncoding() {
      return contentEncoding;
    }

    public void setContentEncoding(@Nullable String setterArg) {
      this.contentEncoding = setterArg;
    }

    /**
     * Served as the 'Content-Language' header on object download.
     *
     * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Language.
     */
    private @Nullable String contentLanguage;

    public @Nullable String getContentLanguage() {
      return contentLanguage;
    }

    public void setContentLanguage(@Nullable String setterArg) {
      this.contentLanguage = setterArg;
    }

    /**
     * Served as the 'Content-Type' header on object download.
     *
     * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type.
     */
    private @Nullable String contentType;

    public @Nullable String getContentType() {
      return contentType;
    }

    public void setContentType(@Nullable String setterArg) {
      this.contentType = setterArg;
    }

    /** Additional user-defined custom metadata. */
    private @Nullable Map<String, String> customMetadata;

    public @Nullable Map<String, String> getCustomMetadata() {
      return customMetadata;
    }

    public void setCustomMetadata(@Nullable Map<String, String> setterArg) {
      this.customMetadata = setterArg;
    }

    public static final class Builder {

      private @Nullable String cacheControl;

      public @NonNull Builder setCacheControl(@Nullable String setterArg) {
        this.cacheControl = setterArg;
        return this;
      }

      private @Nullable String contentDisposition;

      public @NonNull Builder setContentDisposition(@Nullable String setterArg) {
        this.contentDisposition = setterArg;
        return this;
      }

      private @Nullable String contentEncoding;

      public @NonNull Builder setContentEncoding(@Nullable String setterArg) {
        this.contentEncoding = setterArg;
        return this;
      }

      private @Nullable String contentLanguage;

      public @NonNull Builder setContentLanguage(@Nullable String setterArg) {
        this.contentLanguage = setterArg;
        return this;
      }

      private @Nullable String contentType;

      public @NonNull Builder setContentType(@Nullable String setterArg) {
        this.contentType = setterArg;
        return this;
      }

      private @Nullable Map<String, String> customMetadata;

      public @NonNull Builder setCustomMetadata(@Nullable Map<String, String> setterArg) {
        this.customMetadata = setterArg;
        return this;
      }

      public @NonNull PigeonSettableMetadata build() {
        PigeonSettableMetadata pigeonReturn = new PigeonSettableMetadata();
        pigeonReturn.setCacheControl(cacheControl);
        pigeonReturn.setContentDisposition(contentDisposition);
        pigeonReturn.setContentEncoding(contentEncoding);
        pigeonReturn.setContentLanguage(contentLanguage);
        pigeonReturn.setContentType(contentType);
        pigeonReturn.setCustomMetadata(customMetadata);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(cacheControl);
      toListResult.add(contentDisposition);
      toListResult.add(contentEncoding);
      toListResult.add(contentLanguage);
      toListResult.add(contentType);
      toListResult.add(customMetadata);
      return toListResult;
    }

    static @NonNull PigeonSettableMetadata fromList(@NonNull ArrayList<Object> list) {
      PigeonSettableMetadata pigeonResult = new PigeonSettableMetadata();
      Object cacheControl = list.get(0);
      pigeonResult.setCacheControl((String) cacheControl);
      Object contentDisposition = list.get(1);
      pigeonResult.setContentDisposition((String) contentDisposition);
      Object contentEncoding = list.get(2);
      pigeonResult.setContentEncoding((String) contentEncoding);
      Object contentLanguage = list.get(3);
      pigeonResult.setContentLanguage((String) contentLanguage);
      Object contentType = list.get(4);
      pigeonResult.setContentType((String) contentType);
      Object customMetadata = list.get(5);
      pigeonResult.setCustomMetadata((Map<String, String>) customMetadata);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonTaskSnapShot {
    private @NonNull Long bytesTransferred;

    public @NonNull Long getBytesTransferred() {
      return bytesTransferred;
    }

    public void setBytesTransferred(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bytesTransferred\" is null.");
      }
      this.bytesTransferred = setterArg;
    }

    private @Nullable PigeonFullMetaData metadata;

    public @Nullable PigeonFullMetaData getMetadata() {
      return metadata;
    }

    public void setMetadata(@Nullable PigeonFullMetaData setterArg) {
      this.metadata = setterArg;
    }

    private @NonNull PigeonTaskState state;

    public @NonNull PigeonTaskState getState() {
      return state;
    }

    public void setState(@NonNull PigeonTaskState setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"state\" is null.");
      }
      this.state = setterArg;
    }

    private @NonNull Long totalBytes;

    public @NonNull Long getTotalBytes() {
      return totalBytes;
    }

    public void setTotalBytes(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"totalBytes\" is null.");
      }
      this.totalBytes = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonTaskSnapShot() {}

    public static final class Builder {

      private @Nullable Long bytesTransferred;

      public @NonNull Builder setBytesTransferred(@NonNull Long setterArg) {
        this.bytesTransferred = setterArg;
        return this;
      }

      private @Nullable PigeonFullMetaData metadata;

      public @NonNull Builder setMetadata(@Nullable PigeonFullMetaData setterArg) {
        this.metadata = setterArg;
        return this;
      }

      private @Nullable PigeonTaskState state;

      public @NonNull Builder setState(@NonNull PigeonTaskState setterArg) {
        this.state = setterArg;
        return this;
      }

      private @Nullable Long totalBytes;

      public @NonNull Builder setTotalBytes(@NonNull Long setterArg) {
        this.totalBytes = setterArg;
        return this;
      }

      public @NonNull PigeonTaskSnapShot build() {
        PigeonTaskSnapShot pigeonReturn = new PigeonTaskSnapShot();
        pigeonReturn.setBytesTransferred(bytesTransferred);
        pigeonReturn.setMetadata(metadata);
        pigeonReturn.setState(state);
        pigeonReturn.setTotalBytes(totalBytes);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(bytesTransferred);
      toListResult.add((metadata == null) ? null : metadata.toList());
      toListResult.add(state == null ? null : state.index);
      toListResult.add(totalBytes);
      return toListResult;
    }

    static @NonNull PigeonTaskSnapShot fromList(@NonNull ArrayList<Object> list) {
      PigeonTaskSnapShot pigeonResult = new PigeonTaskSnapShot();
      Object bytesTransferred = list.get(0);
      pigeonResult.setBytesTransferred((bytesTransferred == null) ? null : ((bytesTransferred instanceof Integer) ? (Integer) bytesTransferred : (Long) bytesTransferred));
      Object metadata = list.get(1);
      pigeonResult.setMetadata((metadata == null) ? null : PigeonFullMetaData.fromList((ArrayList<Object>) metadata));
      Object state = list.get(2);
      pigeonResult.setState(state == null ? null : PigeonTaskState.values()[(int) state]);
      Object totalBytes = list.get(3);
      pigeonResult.setTotalBytes((totalBytes == null) ? null : ((totalBytes instanceof Integer) ? (Integer) totalBytes : (Long) totalBytes));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class FirebaseStorageHostApiCodec extends StandardMessageCodec {
    public static final FirebaseStorageHostApiCodec INSTANCE = new FirebaseStorageHostApiCodec();

    private FirebaseStorageHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PigeonFirebaseApp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PigeonFullMetaData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PigeonListOptions.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return PigeonSettableMetadata.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return PigeonStorageReference.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return PigeonTaskSnapShot.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PigeonFirebaseApp) {
        stream.write(128);
        writeValue(stream, ((PigeonFirebaseApp) value).toList());
      } else if (value instanceof PigeonFullMetaData) {
        stream.write(129);
        writeValue(stream, ((PigeonFullMetaData) value).toList());
      } else if (value instanceof PigeonListOptions) {
        stream.write(130);
        writeValue(stream, ((PigeonListOptions) value).toList());
      } else if (value instanceof PigeonSettableMetadata) {
        stream.write(131);
        writeValue(stream, ((PigeonSettableMetadata) value).toList());
      } else if (value instanceof PigeonStorageReference) {
        stream.write(132);
        writeValue(stream, ((PigeonStorageReference) value).toList());
      } else if (value instanceof PigeonTaskSnapShot) {
        stream.write(133);
        writeValue(stream, ((PigeonTaskSnapShot) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface FirebaseStorageHostApi {

    @NonNull 
    PigeonStorageReference getReferencebyPath(@NonNull PigeonFirebaseApp app, @NonNull String path);

    void setMaxOperationRetryTime(@NonNull PigeonFirebaseApp app, @NonNull Long time);

    void setMaxUploadRetryTime(@NonNull PigeonFirebaseApp app, @NonNull Long time);

    void setMaxDownloadRetryTime(@NonNull PigeonFirebaseApp app, @NonNull Long time);

    void useStorageEmulator(@NonNull PigeonFirebaseApp app, @NonNull String host, @NonNull Long port, @NonNull Result<Void> result);

    @NonNull 
    PigeonStorageReference referenceGetParent(@NonNull PigeonFirebaseApp app, @NonNull PigeonStorageReference reference);

    @NonNull 
    PigeonStorageReference referenceGetRoot(@NonNull PigeonFirebaseApp app, @NonNull PigeonStorageReference reference);

    @NonNull 
    PigeonStorageReference referenceGetChild(@NonNull PigeonFirebaseApp app, @NonNull PigeonStorageReference reference, @NonNull String path);

    void referenceDelete(@NonNull PigeonFirebaseApp app, @NonNull PigeonStorageReference reference, @NonNull Result<Void> result);

    void referenceGetDownloadURL(@NonNull PigeonFirebaseApp app, @NonNull PigeonStorageReference reference, @NonNull Result<String> result);

    void referenceGetMetaData(@NonNull PigeonFirebaseApp app, @NonNull PigeonStorageReference reference, @NonNull Result<PigeonFullMetaData> result);

    void referenceList(@NonNull PigeonFirebaseApp app, @NonNull PigeonStorageReference reference, @NonNull PigeonListOptions options, @NonNull Result<List<PigeonStorageReference>> result);

    void referenceListAll(@NonNull PigeonFirebaseApp app, @NonNull PigeonStorageReference reference, @NonNull Result<List<PigeonStorageReference>> result);

    void referenceGetData(@NonNull PigeonFirebaseApp app, @NonNull PigeonStorageReference reference, @NonNull Long maxSize, @NonNull Result<byte[]> result);

    void referenceUpdateMetadata(@NonNull PigeonFirebaseApp app, @NonNull PigeonStorageReference reference, @NonNull PigeonSettableMetadata metadata, @NonNull Result<PigeonFullMetaData> result);

    void taskPause(@NonNull PigeonFirebaseApp app, @NonNull PigeonTaskSnapShot taskSnap, @NonNull Result<Boolean> result);

    void taskResume(@NonNull PigeonFirebaseApp app, @NonNull PigeonTaskSnapShot taskSnap, @NonNull Result<Boolean> result);

    void taskCancel(@NonNull PigeonFirebaseApp app, @NonNull PigeonTaskSnapShot taskSnap, @NonNull Result<Boolean> result);

    /** The codec used by FirebaseStorageHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return FirebaseStorageHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `FirebaseStorageHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable FirebaseStorageHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.getReferencebyPath", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                String pathArg = (String) args.get(1);
                try {
                  PigeonStorageReference output = api.getReferencebyPath(appArg, pathArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.setMaxOperationRetryTime", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                Number timeArg = (Number) args.get(1);
                try {
                  api.setMaxOperationRetryTime(appArg, (timeArg == null) ? null : timeArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.setMaxUploadRetryTime", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                Number timeArg = (Number) args.get(1);
                try {
                  api.setMaxUploadRetryTime(appArg, (timeArg == null) ? null : timeArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.setMaxDownloadRetryTime", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                Number timeArg = (Number) args.get(1);
                try {
                  api.setMaxDownloadRetryTime(appArg, (timeArg == null) ? null : timeArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.useStorageEmulator", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                String hostArg = (String) args.get(1);
                Number portArg = (Number) args.get(2);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.useStorageEmulator(appArg, hostArg, (portArg == null) ? null : portArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.referenceGetParent", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                PigeonStorageReference referenceArg = (PigeonStorageReference) args.get(1);
                try {
                  PigeonStorageReference output = api.referenceGetParent(appArg, referenceArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.referenceGetRoot", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                PigeonStorageReference referenceArg = (PigeonStorageReference) args.get(1);
                try {
                  PigeonStorageReference output = api.referenceGetRoot(appArg, referenceArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.referenceGetChild", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                PigeonStorageReference referenceArg = (PigeonStorageReference) args.get(1);
                String pathArg = (String) args.get(2);
                try {
                  PigeonStorageReference output = api.referenceGetChild(appArg, referenceArg, pathArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.referenceDelete", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                PigeonStorageReference referenceArg = (PigeonStorageReference) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.referenceDelete(appArg, referenceArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.referenceGetDownloadURL", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                PigeonStorageReference referenceArg = (PigeonStorageReference) args.get(1);
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.referenceGetDownloadURL(appArg, referenceArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.referenceGetMetaData", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                PigeonStorageReference referenceArg = (PigeonStorageReference) args.get(1);
                Result<PigeonFullMetaData> resultCallback =
                    new Result<PigeonFullMetaData>() {
                      public void success(PigeonFullMetaData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.referenceGetMetaData(appArg, referenceArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.referenceList", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                PigeonStorageReference referenceArg = (PigeonStorageReference) args.get(1);
                PigeonListOptions optionsArg = (PigeonListOptions) args.get(2);
                Result<List<PigeonStorageReference>> resultCallback =
                    new Result<List<PigeonStorageReference>>() {
                      public void success(List<PigeonStorageReference> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.referenceList(appArg, referenceArg, optionsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.referenceListAll", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                PigeonStorageReference referenceArg = (PigeonStorageReference) args.get(1);
                Result<List<PigeonStorageReference>> resultCallback =
                    new Result<List<PigeonStorageReference>>() {
                      public void success(List<PigeonStorageReference> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.referenceListAll(appArg, referenceArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.referenceGetData", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                PigeonStorageReference referenceArg = (PigeonStorageReference) args.get(1);
                Number maxSizeArg = (Number) args.get(2);
                Result<byte[]> resultCallback =
                    new Result<byte[]>() {
                      public void success(byte[] result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.referenceGetData(appArg, referenceArg, (maxSizeArg == null) ? null : maxSizeArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.referenceUpdateMetadata", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                PigeonStorageReference referenceArg = (PigeonStorageReference) args.get(1);
                PigeonSettableMetadata metadataArg = (PigeonSettableMetadata) args.get(2);
                Result<PigeonFullMetaData> resultCallback =
                    new Result<PigeonFullMetaData>() {
                      public void success(PigeonFullMetaData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.referenceUpdateMetadata(appArg, referenceArg, metadataArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.taskPause", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                PigeonTaskSnapShot taskSnapArg = (PigeonTaskSnapShot) args.get(1);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.taskPause(appArg, taskSnapArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.taskResume", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                PigeonTaskSnapShot taskSnapArg = (PigeonTaskSnapShot) args.get(1);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.taskResume(appArg, taskSnapArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseStorageHostApi.taskCancel", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                PigeonTaskSnapShot taskSnapArg = (PigeonTaskSnapShot) args.get(1);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.taskCancel(appArg, taskSnapArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
