// Autogenerated from Pigeon (v3.1.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class PigeonInitializeAppRequest {
  PigeonInitializeAppRequest({
    required this.apiKey,
    this.appName,
    required this.appId,
    required this.messagingSenderId,
    required this.projectId,
    this.databaseURL,
    this.storageBucket,
    this.trackingId,
  });

  String apiKey;
  String? appName;
  String appId;
  String messagingSenderId;
  String projectId;
  String? databaseURL;
  String? storageBucket;
  String? trackingId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['apiKey'] = apiKey;
    pigeonMap['appName'] = appName;
    pigeonMap['appId'] = appId;
    pigeonMap['messagingSenderId'] = messagingSenderId;
    pigeonMap['projectId'] = projectId;
    pigeonMap['databaseURL'] = databaseURL;
    pigeonMap['storageBucket'] = storageBucket;
    pigeonMap['trackingId'] = trackingId;
    return pigeonMap;
  }

  static PigeonInitializeAppRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PigeonInitializeAppRequest(
      apiKey: pigeonMap['apiKey']! as String,
      appName: pigeonMap['appName'] as String?,
      appId: pigeonMap['appId']! as String,
      messagingSenderId: pigeonMap['messagingSenderId']! as String,
      projectId: pigeonMap['projectId']! as String,
      databaseURL: pigeonMap['databaseURL'] as String?,
      storageBucket: pigeonMap['storageBucket'] as String?,
      trackingId: pigeonMap['trackingId'] as String?,
    );
  }
}

class _FirebaseCoreHostApiCodec extends StandardMessageCodec {
  const _FirebaseCoreHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonInitializeAppRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return PigeonInitializeAppRequest.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FirebaseCoreHostApi {
  /// Constructor for [FirebaseCoreHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FirebaseCoreHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _FirebaseCoreHostApiCodec();

  Future<Map<String?, Object?>> intializeApp(
      PigeonInitializeAppRequest? arg_initializeAppRequest) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.FirebaseCoreHostApi.intializeApp',
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_initializeAppRequest]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as Map<Object?, Object?>?)!
          .cast<String?, Object?>();
    }
  }
}
