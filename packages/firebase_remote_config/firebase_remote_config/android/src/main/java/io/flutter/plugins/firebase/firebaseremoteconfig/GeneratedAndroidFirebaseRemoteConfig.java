// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v9.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins.firebase.remoteconfig;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class GeneratedAndroidFirebaseRemoteConfig {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** ValueSource defines the possible sources of a config parameter value. */
  public enum PigeonValueSource {
    /** The value was defined by a static constant. */
    VALUE_STATIC(0),
    /** The value was defined by default config. */
    VALUE_DEFAULT(1),
    /** The value was defined by fetched config. */
    VALUE_REMOTE(2);

    final int index;

    private PigeonValueSource(final int index) {
      this.index = index;
    }
  }

  public enum PigeonRemoteConfigFetchStatus {
    /** Indicates instance has not yet attempted a fetch. */
    NO_FETCH_YET(0),
    /** Indicates the last fetch attempt succeeded. */
    SUCCESS(1),
    /** Indicates the last fetch attempt failed. */
    FAILURE(2),
    /** Indicates the last fetch attempt was rate-limited. */
    THROTTLE(3);

    final int index;

    private PigeonRemoteConfigFetchStatus(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonRemoteConfigSettings {
    private @NonNull Long fetchTimeout;

    public @NonNull Long getFetchTimeout() {
      return fetchTimeout;
    }

    public void setFetchTimeout(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"fetchTimeout\" is null.");
      }
      this.fetchTimeout = setterArg;
    }

    private @NonNull Long minimumFetchInterval;

    public @NonNull Long getMinimumFetchInterval() {
      return minimumFetchInterval;
    }

    public void setMinimumFetchInterval(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"minimumFetchInterval\" is null.");
      }
      this.minimumFetchInterval = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonRemoteConfigSettings() {}

    public static final class Builder {

      private @Nullable Long fetchTimeout;

      public @NonNull Builder setFetchTimeout(@NonNull Long setterArg) {
        this.fetchTimeout = setterArg;
        return this;
      }

      private @Nullable Long minimumFetchInterval;

      public @NonNull Builder setMinimumFetchInterval(@NonNull Long setterArg) {
        this.minimumFetchInterval = setterArg;
        return this;
      }

      public @NonNull PigeonRemoteConfigSettings build() {
        PigeonRemoteConfigSettings pigeonReturn = new PigeonRemoteConfigSettings();
        pigeonReturn.setFetchTimeout(fetchTimeout);
        pigeonReturn.setMinimumFetchInterval(minimumFetchInterval);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(fetchTimeout);
      toListResult.add(minimumFetchInterval);
      return toListResult;
    }

    static @NonNull PigeonRemoteConfigSettings fromList(@NonNull ArrayList<Object> list) {
      PigeonRemoteConfigSettings pigeonResult = new PigeonRemoteConfigSettings();
      Object fetchTimeout = list.get(0);
      pigeonResult.setFetchTimeout((fetchTimeout == null) ? null : ((fetchTimeout instanceof Integer) ? (Integer) fetchTimeout : (Long) fetchTimeout));
      Object minimumFetchInterval = list.get(1);
      pigeonResult.setMinimumFetchInterval((minimumFetchInterval == null) ? null : ((minimumFetchInterval instanceof Integer) ? (Integer) minimumFetchInterval : (Long) minimumFetchInterval));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonRemoteConfigValue {
    private @Nullable List<Long> value;

    public @Nullable List<Long> getValue() {
      return value;
    }

    public void setValue(@Nullable List<Long> setterArg) {
      this.value = setterArg;
    }

    /** Indicates at which source this value came from. */
    private @NonNull PigeonValueSource source;

    public @NonNull PigeonValueSource getSource() {
      return source;
    }

    public void setSource(@NonNull PigeonValueSource setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"source\" is null.");
      }
      this.source = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonRemoteConfigValue() {}

    public static final class Builder {

      private @Nullable List<Long> value;

      public @NonNull Builder setValue(@Nullable List<Long> setterArg) {
        this.value = setterArg;
        return this;
      }

      private @Nullable PigeonValueSource source;

      public @NonNull Builder setSource(@NonNull PigeonValueSource setterArg) {
        this.source = setterArg;
        return this;
      }

      public @NonNull PigeonRemoteConfigValue build() {
        PigeonRemoteConfigValue pigeonReturn = new PigeonRemoteConfigValue();
        pigeonReturn.setValue(value);
        pigeonReturn.setSource(source);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(value);
      toListResult.add(source == null ? null : source.index);
      return toListResult;
    }

    static @NonNull PigeonRemoteConfigValue fromList(@NonNull ArrayList<Object> list) {
      PigeonRemoteConfigValue pigeonResult = new PigeonRemoteConfigValue();
      Object value = list.get(0);
      pigeonResult.setValue((List<Long>) value);
      Object source = list.get(1);
      pigeonResult.setSource(source == null ? null : PigeonValueSource.values()[(int) source]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonFirebaseApp {
    private @NonNull String appName;

    public @NonNull String getAppName() {
      return appName;
    }

    public void setAppName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"appName\" is null.");
      }
      this.appName = setterArg;
    }

    private @Nullable String tenantId;

    public @Nullable String getTenantId() {
      return tenantId;
    }

    public void setTenantId(@Nullable String setterArg) {
      this.tenantId = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonFirebaseApp() {}

    public static final class Builder {

      private @Nullable String appName;

      public @NonNull Builder setAppName(@NonNull String setterArg) {
        this.appName = setterArg;
        return this;
      }

      private @Nullable String tenantId;

      public @NonNull Builder setTenantId(@Nullable String setterArg) {
        this.tenantId = setterArg;
        return this;
      }

      public @NonNull PigeonFirebaseApp build() {
        PigeonFirebaseApp pigeonReturn = new PigeonFirebaseApp();
        pigeonReturn.setAppName(appName);
        pigeonReturn.setTenantId(tenantId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(appName);
      toListResult.add(tenantId);
      return toListResult;
    }

    static @NonNull PigeonFirebaseApp fromList(@NonNull ArrayList<Object> list) {
      PigeonFirebaseApp pigeonResult = new PigeonFirebaseApp();
      Object appName = list.get(0);
      pigeonResult.setAppName((String) appName);
      Object tenantId = list.get(1);
      pigeonResult.setTenantId((String) tenantId);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class FirebaseRemoteConfigHostApiCodec extends StandardMessageCodec {
    public static final FirebaseRemoteConfigHostApiCodec INSTANCE = new FirebaseRemoteConfigHostApiCodec();

    private FirebaseRemoteConfigHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PigeonFirebaseApp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PigeonRemoteConfigSettings.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PigeonRemoteConfigValue.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PigeonFirebaseApp) {
        stream.write(128);
        writeValue(stream, ((PigeonFirebaseApp) value).toList());
      } else if (value instanceof PigeonRemoteConfigSettings) {
        stream.write(129);
        writeValue(stream, ((PigeonRemoteConfigSettings) value).toList());
      } else if (value instanceof PigeonRemoteConfigValue) {
        stream.write(130);
        writeValue(stream, ((PigeonRemoteConfigValue) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface FirebaseRemoteConfigHostApi {

    void activate(@NonNull PigeonFirebaseApp app, @NonNull Result<Boolean> result);

    void ensureInitialized(@NonNull PigeonFirebaseApp app, @NonNull Result<Void> result);

    void fetch(@NonNull PigeonFirebaseApp app, @NonNull Result<Void> result);

    void fetchAndActivate(@NonNull PigeonFirebaseApp app, @NonNull Result<Boolean> result);

    @NonNull 
    Map<String, PigeonRemoteConfigValue> getAll(@NonNull PigeonFirebaseApp app);

    @NonNull 
    Boolean getBool(@NonNull PigeonFirebaseApp app, @NonNull String key);

    @NonNull 
    Long getInt(@NonNull PigeonFirebaseApp app, @NonNull String key);

    @NonNull 
    Double getDouble(@NonNull PigeonFirebaseApp app, @NonNull String key);

    @NonNull 
    String getString(@NonNull PigeonFirebaseApp app, @NonNull String key);

    @NonNull 
    PigeonRemoteConfigValue getValue(@NonNull PigeonFirebaseApp app, @NonNull String key);

    void setConfigSettings(@NonNull PigeonFirebaseApp app, @NonNull PigeonRemoteConfigSettings remoteConfigSettings, @NonNull Result<Void> result);

    void setDefaults(@NonNull PigeonFirebaseApp app, @NonNull Map<String, Object> defaultParameters, @NonNull Result<Void> result);

    /** The codec used by FirebaseRemoteConfigHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return FirebaseRemoteConfigHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `FirebaseRemoteConfigHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable FirebaseRemoteConfigHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.activate", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.activate(appArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.ensureInitialized", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.ensureInitialized(appArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.fetch", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.fetch(appArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.fetchAndActivate", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.fetchAndActivate(appArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getAll", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                try {
                  Map<String, PigeonRemoteConfigValue> output = api.getAll(appArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getBool", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                String keyArg = (String) args.get(1);
                try {
                  Boolean output = api.getBool(appArg, keyArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getInt", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                String keyArg = (String) args.get(1);
                try {
                  Long output = api.getInt(appArg, keyArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getDouble", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                String keyArg = (String) args.get(1);
                try {
                  Double output = api.getDouble(appArg, keyArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getString", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                String keyArg = (String) args.get(1);
                try {
                  String output = api.getString(appArg, keyArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getValue", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                String keyArg = (String) args.get(1);
                try {
                  PigeonRemoteConfigValue output = api.getValue(appArg, keyArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.setConfigSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                PigeonRemoteConfigSettings remoteConfigSettingsArg = (PigeonRemoteConfigSettings) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setConfigSettings(appArg, remoteConfigSettingsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.setDefaults", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                Map<String, Object> defaultParametersArg = (Map<String, Object>) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setDefaults(appArg, defaultParametersArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
