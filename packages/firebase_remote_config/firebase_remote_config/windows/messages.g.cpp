// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v9.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace firebase_remote_config_windows {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// PigeonRemoteConfigSettings

PigeonRemoteConfigSettings::PigeonRemoteConfigSettings(
  int64_t fetch_timeout,
  int64_t minimum_fetch_interval)
 : fetch_timeout_(fetch_timeout),
    minimum_fetch_interval_(minimum_fetch_interval) {}

int64_t PigeonRemoteConfigSettings::fetch_timeout() const {
  return fetch_timeout_;
}

void PigeonRemoteConfigSettings::set_fetch_timeout(int64_t value_arg) {
  fetch_timeout_ = value_arg;
}


int64_t PigeonRemoteConfigSettings::minimum_fetch_interval() const {
  return minimum_fetch_interval_;
}

void PigeonRemoteConfigSettings::set_minimum_fetch_interval(int64_t value_arg) {
  minimum_fetch_interval_ = value_arg;
}


EncodableList PigeonRemoteConfigSettings::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(fetch_timeout_));
  list.push_back(EncodableValue(minimum_fetch_interval_));
  return list;
}

PigeonRemoteConfigSettings PigeonRemoteConfigSettings::FromEncodableList(const EncodableList& list) {
  PigeonRemoteConfigSettings decoded(
    list[0].LongValue(),
    list[1].LongValue());
  return decoded;
}

// PigeonRemoteConfigValue

PigeonRemoteConfigValue::PigeonRemoteConfigValue(const PigeonValueSource& source)
 : source_(source) {}

PigeonRemoteConfigValue::PigeonRemoteConfigValue(
  const EncodableList* value,
  const PigeonValueSource& source)
 : value_(value ? std::optional<EncodableList>(*value) : std::nullopt),
    source_(source) {}

const EncodableList* PigeonRemoteConfigValue::value() const {
  return value_ ? &(*value_) : nullptr;
}

void PigeonRemoteConfigValue::set_value(const EncodableList* value_arg) {
  value_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void PigeonRemoteConfigValue::set_value(const EncodableList& value_arg) {
  value_ = value_arg;
}


const PigeonValueSource& PigeonRemoteConfigValue::source() const {
  return source_;
}

void PigeonRemoteConfigValue::set_source(const PigeonValueSource& value_arg) {
  source_ = value_arg;
}


EncodableList PigeonRemoteConfigValue::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(value_ ? EncodableValue(*value_) : EncodableValue());
  list.push_back(EncodableValue((int)source_));
  return list;
}

PigeonRemoteConfigValue PigeonRemoteConfigValue::FromEncodableList(const EncodableList& list) {
  PigeonRemoteConfigValue decoded(
    (PigeonValueSource)(std::get<int32_t>(list[1])));
  auto& encodable_value = list[0];
  if (!encodable_value.IsNull()) {
    decoded.set_value(std::get<EncodableList>(encodable_value));
  }
  return decoded;
}

// PigeonFirebaseApp

PigeonFirebaseApp::PigeonFirebaseApp(const std::string& app_name)
 : app_name_(app_name) {}

PigeonFirebaseApp::PigeonFirebaseApp(
  const std::string& app_name,
  const std::string* tenant_id)
 : app_name_(app_name),
    tenant_id_(tenant_id ? std::optional<std::string>(*tenant_id) : std::nullopt) {}

const std::string& PigeonFirebaseApp::app_name() const {
  return app_name_;
}

void PigeonFirebaseApp::set_app_name(std::string_view value_arg) {
  app_name_ = value_arg;
}


const std::string* PigeonFirebaseApp::tenant_id() const {
  return tenant_id_ ? &(*tenant_id_) : nullptr;
}

void PigeonFirebaseApp::set_tenant_id(const std::string_view* value_arg) {
  tenant_id_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PigeonFirebaseApp::set_tenant_id(std::string_view value_arg) {
  tenant_id_ = value_arg;
}


EncodableList PigeonFirebaseApp::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(app_name_));
  list.push_back(tenant_id_ ? EncodableValue(*tenant_id_) : EncodableValue());
  return list;
}

PigeonFirebaseApp PigeonFirebaseApp::FromEncodableList(const EncodableList& list) {
  PigeonFirebaseApp decoded(
    std::get<std::string>(list[0]));
  auto& encodable_tenant_id = list[1];
  if (!encodable_tenant_id.IsNull()) {
    decoded.set_tenant_id(std::get<std::string>(encodable_tenant_id));
  }
  return decoded;
}


FirebaseRemoteConfigHostApiCodecSerializer::FirebaseRemoteConfigHostApiCodecSerializer() {}

EncodableValue FirebaseRemoteConfigHostApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(PigeonFirebaseApp::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(PigeonRemoteConfigSettings::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 130:
      return CustomEncodableValue(PigeonRemoteConfigValue::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void FirebaseRemoteConfigHostApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(PigeonFirebaseApp)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<PigeonFirebaseApp>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(PigeonRemoteConfigSettings)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<PigeonRemoteConfigSettings>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(PigeonRemoteConfigValue)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<PigeonRemoteConfigValue>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by FirebaseRemoteConfigHostApi.
const flutter::StandardMessageCodec& FirebaseRemoteConfigHostApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&FirebaseRemoteConfigHostApiCodecSerializer::GetInstance());
}

// Sets up an instance of `FirebaseRemoteConfigHostApi` to handle messages through the `binary_messenger`.
void FirebaseRemoteConfigHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  FirebaseRemoteConfigHostApi* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.activate", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          api->Activate(app_arg, [reply](ErrorOr<bool>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.ensureInitialized", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          api->EnsureInitialized(app_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.fetch", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          api->Fetch(app_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.fetchAndActivate", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          api->FetchAndActivate(app_arg, [reply](ErrorOr<bool>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getAll", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          ErrorOr<EncodableMap> output = api->GetAll(app_arg);
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getBool", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          const auto& encodable_key_arg = args.at(1);
          if (encodable_key_arg.IsNull()) {
            reply(WrapError("key_arg unexpectedly null."));
            return;
          }
          const auto& key_arg = std::get<std::string>(encodable_key_arg);
          ErrorOr<bool> output = api->GetBool(app_arg, key_arg);
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getInt", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          const auto& encodable_key_arg = args.at(1);
          if (encodable_key_arg.IsNull()) {
            reply(WrapError("key_arg unexpectedly null."));
            return;
          }
          const auto& key_arg = std::get<std::string>(encodable_key_arg);
          ErrorOr<int64_t> output = api->GetInt(app_arg, key_arg);
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getDouble", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          const auto& encodable_key_arg = args.at(1);
          if (encodable_key_arg.IsNull()) {
            reply(WrapError("key_arg unexpectedly null."));
            return;
          }
          const auto& key_arg = std::get<std::string>(encodable_key_arg);
          ErrorOr<double> output = api->GetDouble(app_arg, key_arg);
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getString", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          const auto& encodable_key_arg = args.at(1);
          if (encodable_key_arg.IsNull()) {
            reply(WrapError("key_arg unexpectedly null."));
            return;
          }
          const auto& key_arg = std::get<std::string>(encodable_key_arg);
          ErrorOr<std::string> output = api->GetString(app_arg, key_arg);
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getValue", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          const auto& encodable_key_arg = args.at(1);
          if (encodable_key_arg.IsNull()) {
            reply(WrapError("key_arg unexpectedly null."));
            return;
          }
          const auto& key_arg = std::get<std::string>(encodable_key_arg);
          ErrorOr<PigeonRemoteConfigValue> output = api->GetValue(app_arg, key_arg);
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.setConfigSettings", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          const auto& encodable_remote_config_settings_arg = args.at(1);
          if (encodable_remote_config_settings_arg.IsNull()) {
            reply(WrapError("remote_config_settings_arg unexpectedly null."));
            return;
          }
          const auto& remote_config_settings_arg = std::any_cast<const PigeonRemoteConfigSettings&>(std::get<CustomEncodableValue>(encodable_remote_config_settings_arg));
          api->SetConfigSettings(app_arg, remote_config_settings_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseRemoteConfigHostApi.setDefaults", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          const auto& encodable_default_parameters_arg = args.at(1);
          if (encodable_default_parameters_arg.IsNull()) {
            reply(WrapError("default_parameters_arg unexpectedly null."));
            return;
          }
          const auto& default_parameters_arg = std::get<EncodableMap>(encodable_default_parameters_arg);
          api->SetDefaults(app_arg, default_parameters_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue FirebaseRemoteConfigHostApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue FirebaseRemoteConfigHostApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace firebase_remote_config_windows
