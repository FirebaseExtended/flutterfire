// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v9.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace firebase_remote_config_windows {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class FirebaseRemoteConfigHostApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


// ValueSource defines the possible sources of a config parameter value.
enum class PigeonValueSource {
  // The value was defined by a static constant.
  valueStatic = 0,
  // The value was defined by default config.
  valueDefault = 1,
  // The value was defined by fetched config.
  valueRemote = 2
};

enum class PigeonRemoteConfigFetchStatus {
  // Indicates instance has not yet attempted a fetch.
  noFetchYet = 0,
  // Indicates the last fetch attempt succeeded.
  success = 1,
  // Indicates the last fetch attempt failed.
  failure = 2,
  // Indicates the last fetch attempt was rate-limited.
  throttle = 3
};

// Generated class from Pigeon that represents data sent in messages.
class PigeonRemoteConfigSettings {
 public:
  // Constructs an object setting all fields.
  explicit PigeonRemoteConfigSettings(
    int64_t fetch_timeout,
    int64_t minimum_fetch_interval);

  int64_t fetch_timeout() const;
  void set_fetch_timeout(int64_t value_arg);

  int64_t minimum_fetch_interval() const;
  void set_minimum_fetch_interval(int64_t value_arg);


 private:
  static PigeonRemoteConfigSettings FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FirebaseRemoteConfigHostApi;
  friend class FirebaseRemoteConfigHostApiCodecSerializer;
  int64_t fetch_timeout_;
  int64_t minimum_fetch_interval_;

};


// Generated class from Pigeon that represents data sent in messages.
class PigeonRemoteConfigValue {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit PigeonRemoteConfigValue(const PigeonValueSource& source);

  // Constructs an object setting all fields.
  explicit PigeonRemoteConfigValue(
    const flutter::EncodableList* value,
    const PigeonValueSource& source);

  const flutter::EncodableList* value() const;
  void set_value(const flutter::EncodableList* value_arg);
  void set_value(const flutter::EncodableList& value_arg);

  // Indicates at which source this value came from.
  const PigeonValueSource& source() const;
  void set_source(const PigeonValueSource& value_arg);


 private:
  static PigeonRemoteConfigValue FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FirebaseRemoteConfigHostApi;
  friend class FirebaseRemoteConfigHostApiCodecSerializer;
  std::optional<flutter::EncodableList> value_;
  PigeonValueSource source_;

};


// Generated class from Pigeon that represents data sent in messages.
class PigeonFirebaseApp {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit PigeonFirebaseApp(const std::string& app_name);

  // Constructs an object setting all fields.
  explicit PigeonFirebaseApp(
    const std::string& app_name,
    const std::string* tenant_id);

  const std::string& app_name() const;
  void set_app_name(std::string_view value_arg);

  const std::string* tenant_id() const;
  void set_tenant_id(const std::string_view* value_arg);
  void set_tenant_id(std::string_view value_arg);


 private:
  static PigeonFirebaseApp FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FirebaseRemoteConfigHostApi;
  friend class FirebaseRemoteConfigHostApiCodecSerializer;
  std::string app_name_;
  std::optional<std::string> tenant_id_;

};

class FirebaseRemoteConfigHostApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  FirebaseRemoteConfigHostApiCodecSerializer();
  inline static FirebaseRemoteConfigHostApiCodecSerializer& GetInstance() {
    static FirebaseRemoteConfigHostApiCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class FirebaseRemoteConfigHostApi {
 public:
  FirebaseRemoteConfigHostApi(const FirebaseRemoteConfigHostApi&) = delete;
  FirebaseRemoteConfigHostApi& operator=(const FirebaseRemoteConfigHostApi&) = delete;
  virtual ~FirebaseRemoteConfigHostApi() {}
  virtual void Activate(
    const PigeonFirebaseApp& app,
    std::function<void(ErrorOr<bool> reply)> result) = 0;
  virtual void EnsureInitialized(
    const PigeonFirebaseApp& app,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void Fetch(
    const PigeonFirebaseApp& app,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void FetchAndActivate(
    const PigeonFirebaseApp& app,
    std::function<void(ErrorOr<bool> reply)> result) = 0;
  virtual ErrorOr<flutter::EncodableMap> GetAll(const PigeonFirebaseApp& app) = 0;
  virtual ErrorOr<bool> GetBool(
    const PigeonFirebaseApp& app,
    const std::string& key) = 0;
  virtual ErrorOr<int64_t> GetInt(
    const PigeonFirebaseApp& app,
    const std::string& key) = 0;
  virtual ErrorOr<double> GetDouble(
    const PigeonFirebaseApp& app,
    const std::string& key) = 0;
  virtual ErrorOr<std::string> GetString(
    const PigeonFirebaseApp& app,
    const std::string& key) = 0;
  virtual ErrorOr<PigeonRemoteConfigValue> GetValue(
    const PigeonFirebaseApp& app,
    const std::string& key) = 0;
  virtual void SetConfigSettings(
    const PigeonFirebaseApp& app,
    const PigeonRemoteConfigSettings& remote_config_settings,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void SetDefaults(
    const PigeonFirebaseApp& app,
    const flutter::EncodableMap& default_parameters,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;

  // The codec used by FirebaseRemoteConfigHostApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `FirebaseRemoteConfigHostApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    FirebaseRemoteConfigHostApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  FirebaseRemoteConfigHostApi() = default;

};
}  // namespace firebase_remote_config_windows
#endif  // PIGEON_MESSAGES_G_H_
