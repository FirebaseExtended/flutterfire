// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v9.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.g.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface PigeonRemoteConfigSettings ()
+ (PigeonRemoteConfigSettings *)fromList:(NSArray *)list;
+ (nullable PigeonRemoteConfigSettings *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonRemoteConfigValue ()
+ (PigeonRemoteConfigValue *)fromList:(NSArray *)list;
+ (nullable PigeonRemoteConfigValue *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonFirebaseApp ()
+ (PigeonFirebaseApp *)fromList:(NSArray *)list;
+ (nullable PigeonFirebaseApp *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation PigeonRemoteConfigSettings
+ (instancetype)makeWithFetchTimeout:(NSNumber *)fetchTimeout
    minimumFetchInterval:(NSNumber *)minimumFetchInterval {
  PigeonRemoteConfigSettings* pigeonResult = [[PigeonRemoteConfigSettings alloc] init];
  pigeonResult.fetchTimeout = fetchTimeout;
  pigeonResult.minimumFetchInterval = minimumFetchInterval;
  return pigeonResult;
}
+ (PigeonRemoteConfigSettings *)fromList:(NSArray *)list {
  PigeonRemoteConfigSettings *pigeonResult = [[PigeonRemoteConfigSettings alloc] init];
  pigeonResult.fetchTimeout = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.fetchTimeout != nil, @"");
  pigeonResult.minimumFetchInterval = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.minimumFetchInterval != nil, @"");
  return pigeonResult;
}
+ (nullable PigeonRemoteConfigSettings *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonRemoteConfigSettings fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.fetchTimeout ?: [NSNull null]),
    (self.minimumFetchInterval ?: [NSNull null]),
  ];
}
@end

@implementation PigeonRemoteConfigValue
+ (instancetype)makeWithValue:(nullable NSArray<NSNumber *> *)value
    source:(PigeonValueSource)source {
  PigeonRemoteConfigValue* pigeonResult = [[PigeonRemoteConfigValue alloc] init];
  pigeonResult.value = value;
  pigeonResult.source = source;
  return pigeonResult;
}
+ (PigeonRemoteConfigValue *)fromList:(NSArray *)list {
  PigeonRemoteConfigValue *pigeonResult = [[PigeonRemoteConfigValue alloc] init];
  pigeonResult.value = GetNullableObjectAtIndex(list, 0);
  pigeonResult.source = [GetNullableObjectAtIndex(list, 1) integerValue];
  return pigeonResult;
}
+ (nullable PigeonRemoteConfigValue *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonRemoteConfigValue fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.value ?: [NSNull null]),
    @(self.source),
  ];
}
@end

@implementation PigeonFirebaseApp
+ (instancetype)makeWithAppName:(NSString *)appName
    tenantId:(nullable NSString *)tenantId {
  PigeonFirebaseApp* pigeonResult = [[PigeonFirebaseApp alloc] init];
  pigeonResult.appName = appName;
  pigeonResult.tenantId = tenantId;
  return pigeonResult;
}
+ (PigeonFirebaseApp *)fromList:(NSArray *)list {
  PigeonFirebaseApp *pigeonResult = [[PigeonFirebaseApp alloc] init];
  pigeonResult.appName = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.appName != nil, @"");
  pigeonResult.tenantId = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable PigeonFirebaseApp *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonFirebaseApp fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.appName ?: [NSNull null]),
    (self.tenantId ?: [NSNull null]),
  ];
}
@end

@interface FirebaseRemoteConfigHostApiCodecReader : FlutterStandardReader
@end
@implementation FirebaseRemoteConfigHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [PigeonFirebaseApp fromList:[self readValue]];
    case 129: 
      return [PigeonRemoteConfigSettings fromList:[self readValue]];
    case 130: 
      return [PigeonRemoteConfigValue fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FirebaseRemoteConfigHostApiCodecWriter : FlutterStandardWriter
@end
@implementation FirebaseRemoteConfigHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[PigeonFirebaseApp class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonRemoteConfigSettings class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonRemoteConfigValue class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FirebaseRemoteConfigHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FirebaseRemoteConfigHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FirebaseRemoteConfigHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FirebaseRemoteConfigHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FirebaseRemoteConfigHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FirebaseRemoteConfigHostApiCodecReaderWriter *readerWriter = [[FirebaseRemoteConfigHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void FirebaseRemoteConfigHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FirebaseRemoteConfigHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FirebaseRemoteConfigHostApi.activate"
        binaryMessenger:binaryMessenger
        codec:FirebaseRemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(activateApp:completion:)], @"FirebaseRemoteConfigHostApi api (%@) doesn't respond to @selector(activateApp:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api activateApp:arg_app completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FirebaseRemoteConfigHostApi.ensureInitialized"
        binaryMessenger:binaryMessenger
        codec:FirebaseRemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(ensureInitializedApp:completion:)], @"FirebaseRemoteConfigHostApi api (%@) doesn't respond to @selector(ensureInitializedApp:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api ensureInitializedApp:arg_app completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FirebaseRemoteConfigHostApi.fetch"
        binaryMessenger:binaryMessenger
        codec:FirebaseRemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fetchApp:completion:)], @"FirebaseRemoteConfigHostApi api (%@) doesn't respond to @selector(fetchApp:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api fetchApp:arg_app completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FirebaseRemoteConfigHostApi.fetchAndActivate"
        binaryMessenger:binaryMessenger
        codec:FirebaseRemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fetchAndActivateApp:completion:)], @"FirebaseRemoteConfigHostApi api (%@) doesn't respond to @selector(fetchAndActivateApp:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api fetchAndActivateApp:arg_app completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getAll"
        binaryMessenger:binaryMessenger
        codec:FirebaseRemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAllApp:error:)], @"FirebaseRemoteConfigHostApi api (%@) doesn't respond to @selector(getAllApp:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSDictionary<NSString *, PigeonRemoteConfigValue *> *output = [api getAllApp:arg_app error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getBool"
        binaryMessenger:binaryMessenger
        codec:FirebaseRemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getBoolApp:key:error:)], @"FirebaseRemoteConfigHostApi api (%@) doesn't respond to @selector(getBoolApp:key:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_key = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        NSNumber *output = [api getBoolApp:arg_app key:arg_key error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getInt"
        binaryMessenger:binaryMessenger
        codec:FirebaseRemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIntApp:key:error:)], @"FirebaseRemoteConfigHostApi api (%@) doesn't respond to @selector(getIntApp:key:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_key = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        NSNumber *output = [api getIntApp:arg_app key:arg_key error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getDouble"
        binaryMessenger:binaryMessenger
        codec:FirebaseRemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getDoubleApp:key:error:)], @"FirebaseRemoteConfigHostApi api (%@) doesn't respond to @selector(getDoubleApp:key:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_key = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        NSNumber *output = [api getDoubleApp:arg_app key:arg_key error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getString"
        binaryMessenger:binaryMessenger
        codec:FirebaseRemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getStringApp:key:error:)], @"FirebaseRemoteConfigHostApi api (%@) doesn't respond to @selector(getStringApp:key:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_key = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        NSString *output = [api getStringApp:arg_app key:arg_key error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FirebaseRemoteConfigHostApi.getValue"
        binaryMessenger:binaryMessenger
        codec:FirebaseRemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getValueApp:key:error:)], @"FirebaseRemoteConfigHostApi api (%@) doesn't respond to @selector(getValueApp:key:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_key = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        PigeonRemoteConfigValue *output = [api getValueApp:arg_app key:arg_key error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FirebaseRemoteConfigHostApi.setConfigSettings"
        binaryMessenger:binaryMessenger
        codec:FirebaseRemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setConfigSettingsApp:remoteConfigSettings:completion:)], @"FirebaseRemoteConfigHostApi api (%@) doesn't respond to @selector(setConfigSettingsApp:remoteConfigSettings:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        PigeonRemoteConfigSettings *arg_remoteConfigSettings = GetNullableObjectAtIndex(args, 1);
        [api setConfigSettingsApp:arg_app remoteConfigSettings:arg_remoteConfigSettings completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FirebaseRemoteConfigHostApi.setDefaults"
        binaryMessenger:binaryMessenger
        codec:FirebaseRemoteConfigHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setDefaultsApp:defaultParameters:completion:)], @"FirebaseRemoteConfigHostApi api (%@) doesn't respond to @selector(setDefaultsApp:defaultParameters:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSDictionary<NSString *, id> *arg_defaultParameters = GetNullableObjectAtIndex(args, 1);
        [api setDefaultsApp:arg_app defaultParameters:arg_defaultParameters completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
