// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v9.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

/// ValueSource defines the possible sources of a config parameter value.
typedef NS_ENUM(NSUInteger, PigeonValueSource) {
  /// The value was defined by a static constant.
  PigeonValueSourceValueStatic = 0,
  /// The value was defined by default config.
  PigeonValueSourceValueDefault = 1,
  /// The value was defined by fetched config.
  PigeonValueSourceValueRemote = 2,
};

typedef NS_ENUM(NSUInteger, PigeonRemoteConfigFetchStatus) {
  /// Indicates instance has not yet attempted a fetch.
  PigeonRemoteConfigFetchStatusNoFetchYet = 0,
  /// Indicates the last fetch attempt succeeded.
  PigeonRemoteConfigFetchStatusSuccess = 1,
  /// Indicates the last fetch attempt failed.
  PigeonRemoteConfigFetchStatusFailure = 2,
  /// Indicates the last fetch attempt was rate-limited.
  PigeonRemoteConfigFetchStatusThrottle = 3,
};

@class PigeonRemoteConfigSettings;
@class PigeonRemoteConfigValue;
@class PigeonFirebaseApp;

@interface PigeonRemoteConfigSettings : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithFetchTimeout:(NSNumber *)fetchTimeout
    minimumFetchInterval:(NSNumber *)minimumFetchInterval;
@property(nonatomic, strong) NSNumber * fetchTimeout;
@property(nonatomic, strong) NSNumber * minimumFetchInterval;
@end

@interface PigeonRemoteConfigValue : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithValue:(nullable NSArray<NSNumber *> *)value
    source:(PigeonValueSource)source;
@property(nonatomic, strong, nullable) NSArray<NSNumber *> * value;
/// Indicates at which source this value came from.
@property(nonatomic, assign) PigeonValueSource source;
@end

@interface PigeonFirebaseApp : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithAppName:(NSString *)appName
    tenantId:(nullable NSString *)tenantId;
@property(nonatomic, copy) NSString * appName;
@property(nonatomic, copy, nullable) NSString * tenantId;
@end

/// The codec used by FirebaseRemoteConfigHostApi.
NSObject<FlutterMessageCodec> *FirebaseRemoteConfigHostApiGetCodec(void);

@protocol FirebaseRemoteConfigHostApi
- (void)activateApp:(PigeonFirebaseApp *)app completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)ensureInitializedApp:(PigeonFirebaseApp *)app completion:(void (^)(FlutterError *_Nullable))completion;
- (void)fetchApp:(PigeonFirebaseApp *)app completion:(void (^)(FlutterError *_Nullable))completion;
- (void)fetchAndActivateApp:(PigeonFirebaseApp *)app completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (nullable NSDictionary<NSString *, PigeonRemoteConfigValue *> *)getAllApp:(PigeonFirebaseApp *)app error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getBoolApp:(PigeonFirebaseApp *)app key:(NSString *)key error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getIntApp:(PigeonFirebaseApp *)app key:(NSString *)key error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getDoubleApp:(PigeonFirebaseApp *)app key:(NSString *)key error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSString *)getStringApp:(PigeonFirebaseApp *)app key:(NSString *)key error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable PigeonRemoteConfigValue *)getValueApp:(PigeonFirebaseApp *)app key:(NSString *)key error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setConfigSettingsApp:(PigeonFirebaseApp *)app remoteConfigSettings:(PigeonRemoteConfigSettings *)remoteConfigSettings completion:(void (^)(FlutterError *_Nullable))completion;
- (void)setDefaultsApp:(PigeonFirebaseApp *)app defaultParameters:(NSDictionary<NSString *, id> *)defaultParameters completion:(void (^)(FlutterError *_Nullable))completion;
@end

extern void FirebaseRemoteConfigHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FirebaseRemoteConfigHostApi> *_Nullable api);

NS_ASSUME_NONNULL_END
