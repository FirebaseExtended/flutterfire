// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "firebase_analytics_messages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

NSObject<FlutterMessageCodec> *FirebaseAnalyticsHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void FirebaseAnalyticsHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger,
                                   NSObject<FirebaseAnalyticsHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               @"dev.flutter.pigeon.firebase_analytics_platform_interface.FirebaseAnalyticsHostApi."
               @"initiateOnDeviceConversionMeasurementWithEmailAddress"
        binaryMessenger:binaryMessenger
                  codec:FirebaseAnalyticsHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (initiateOnDeviceConversionMeasurementWithEmailAddressEmailAddress:
                                                                             completion:)],
                @"FirebaseAnalyticsHostApi api (%@) doesn't respond to "
                @"@selector(initiateOnDeviceConversionMeasurementWithEmailAddressEmailAddress:"
                @"completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_emailAddress = GetNullableObjectAtIndex(args, 0);
        [api initiateOnDeviceConversionMeasurementWithEmailAddressEmailAddress:arg_emailAddress
                                                                    completion:^(
                                                                        FlutterError
                                                                            *_Nullable error) {
                                                                      callback(
                                                                          wrapResult(nil, error));
                                                                    }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
